--- blomenk_python2.txt	2021-09-15 19:13:59.871600531 +0200
+++ downey_python2.txt	2021-08-08 01:32:52.570294578 +0200
@@ -1,111 +1,10 @@
 
-// $Id: thinkpython2.md,v 2.3 2021/09/15 17:02:53 heiko Exp $
-//
-// $Log: thinkpython2.md,v $
-// Revision 2.3  2021/09/15 17:02:53  heiko
-// R2D16: Added first part of Section 1.6 (Debugging).
-//
-// Revision 2.2  2021/09/09 13:03:51  heiko
-// R2D10: Added link to Think Python source diff file.
-//
-// Revision 2.1  2021/09/03 14:04:04  heiko
-// R2D4: Added Section 1.5 (The first program).
-//
-// Revision 1.19  2021/08/09 23:04:32  heiko
-// R1D79: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.18  2021/08/08 23:18:48  heiko
-// R1D78: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.17  2021/08/08 23:09:08  heiko
-// R1D78: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.16  2021/08/08 22:15:53  heiko
-// R1D78: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.15  2021/08/08 21:23:00  heiko
-// R1D78: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.14  2021/08/08 21:13:54  heiko
-// R1D78: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.13  2021/08/07 22:53:20  heiko
-// R1D77: Modified columns per line (lynx dump: 95 cpl).
-//
-// Revision 1.12  2021/08/05 00:58:40  heiko
-// R1D74: Added Section 1.4 (Formal and natural languages).
-//
-// Revision 1.11  2021/06/15 01:06:13  heiko
-// R1D23: Added Section 1.3.4 (Experimental debugging).
-//
-// Revision 1.10  2021/06/09 17:52:37  heiko
-// R1D18: Added Section 1.3.3 (Semantic errors).
-//
-// Revision 1.9  2021/06/05 17:58:14  heiko
-// R1D14: Added Section 1.3.2 (Runtime errors).
-//
-// Revision 1.8  2021/06/04 21:59:09  heiko
-// R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
-//
-// Revision 1.7  2021/06/02 20:22:52  heiko
-// R1D11: Modified the alt attributes of two images.
-//
-// Revision 1.6  2021/06/01 06:54:26  heiko
-// R1D10: Finished Section 1.4 (Formal and natural languages).
-//
-// Revision 1.5  2021/05/30 14:04:29  heiko
-// R1D8: Finished Section 1.3 (What is debugging?).
-//
-// Revision 1.4  2021/05/28 12:07:58  heiko
-// R1D6: Added Section 1.3.1 (Syntax errors).
-//
-// Revision 1.3  2021/05/26 18:12:08  heiko
-// R1D4: Finished Section 1.2 (What is a program?).
-//
-// Revision 1.2  2021/05/23 19:11:26  heiko
-// R1D1: Finished Section 1.1 (The Python programming language).
-//
-// Revision 1.1  2021/05/23 16:07:38  heiko
-// Initial revision
-//
-
-   [1]#100DaysOfLinux :: ROUND 1 DAY 1–100
-
-   Markdown Version of “Think Python First Edition”
-
-   Think Python First Edition is available at
-   [2]https://greenteapress.com/wp/think-python/.
-   Styled HTML generated by [3]Dillinger.
-
-   Challenge started on May 23, 2021.
-   [4]@HeikoBlomenkamp
-
-                     Think Python: How to Think Like a Computer Scientist
-
-   Allen B. Downey
-   First Edition (which uses Python 2), Version 2.0.17
-
-   Copyright © 2017 Allen B. Downey.
-   [5]Modifications by Heiko Blomenkamp.
-
-   Permission is granted to copy, distribute, and/or modify this work under the terms of
-   the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
-   available at [6]http://creativecommons.org/licenses/by-nc/3.0/.
-     * [7]Preface
-     * [8]The way of the program
-          + [9]The Python programming language
-          + [10]What is a program?
-          + [11]What is debugging?
-          + [12]Formal and natural languages
-          + [13]The first program
-          + [14]Debugging
+   [1]Previous [2]Up [3]Next
+     _________________________________________________________________________________
 
-Preface
+   [4]Buy this book at Amazon.com
 
-   [postponed]
-   [version: python -V]
-
-1. The way of the program
+Chapter 1  The way of the program
 
    The goal of this book is to teach you to think like a computer scientist. This way of
    thinking combines some of the best features of mathematics, engineering, and natural
@@ -124,7 +23,7 @@
    level, you will use programming as a means to an end. As we go along, that end will
    become clearer.
 
-  1.1 The Python programming language
+1.1  The Python programming language
 
    The programming language you will learn is Python. Python is an example of a
    high-level language; other high-level languages you might have heard of are C, C++,
@@ -149,26 +48,28 @@
    Two kinds of programs process high-level languages into low-level languages:
    interpreters and compilers. An interpreter reads a high-level program and executes it,
    meaning that it does what the program says. It processes the program a little at a
-   time, alternately reading lines and performing computations. Figure 1.1 shows the
+   time, alternately reading lines and performing computations. Figure [5]1.1 shows the
    structure of an interpreter.
+            ____________________________________________________________________
 
-   Figure 1.1
-          An interpreter processes the program a little at a time,
-          alternately reading lines and performing computations.
+   [thinkpython001.png]
 
-               From: Source Code to: Interpreter to: Output.
+   Figure 1.1: An interpreter processes the program a little at a time, alternately
+   reading lines and performing computations.
+            ____________________________________________________________________
 
    A compiler reads the program and translates it completely before the program starts
    running. In this context, the high-level program is called the source code, and the
    translated program is called the object code or the executable. Once a program is
-   compiled, you can execute it repeatedly without further translation. Figure 1.2
+   compiled, you can execute it repeatedly without further translation. Figure [6]1.2
    shows the structure of a compiler.
+            ____________________________________________________________________
 
-   Figure 1.2
-          A compiler translates source code into object code,
-          which is run by a hardware executor.
+   [thinkpython002.png]
 
-     From: Source Code to: Compiler to: Object Code to: Executor to: Output.
+   Figure 1.2: A compiler translates source code into object code, which is run by a
+   hardware executor.
+            ____________________________________________________________________
 
    Python is considered an interpreted language because Python programs are executed by
    an interpreter. There are two ways to use the interpreter: interactive mode and script
@@ -177,24 +78,24 @@
 >>> 1 + 1
 2
 
-   The chevron, >>> , is the prompt the interpreter uses to indicate that it is ready. If
-   you type 1 + 1 , the interpreter replies 2 .
+   The chevron, >>>, is the prompt the interpreter uses to indicate that it is ready. If
+   you type 1 + 1, the interpreter replies 2.
 
    Alternatively, you can store code in a file and use the interpreter to execute the
    contents of the file, which is called a script. By convention, Python scripts have
-   names that end with .py .
+   names that end with .py.
 
    To execute the script, you have to tell the interpreter the name of the file. If you
-   have a script named dinsdale.py and you are working in a *NIX command window, you type
-   python dinsdale.py . In other development environments, the details of executing
+   have a script named dinsdale.py and you are working in a UNIX command window, you type
+   python dinsdale.py. In other development environments, the details of executing
    scripts are different. You can find instructions for your environment at the Python
-   website http://python.org .
+   website [7]http://python.org.
 
    Working in interactive mode is convenient for testing small pieces of code because you
    can type and execute them immediately. But for anything more than a few lines, you
    should save your code as a script so you can modify and execute it in the future.
 
-  1.2 What is a program?
+1.2  What is a program?
 
    A program is a sequence of instructions that specifies how to perform a computation.
    The computation might be something mathematical, such as solving a system of equations
@@ -229,7 +130,7 @@
    That may be a little vague, but we will come back to this topic when we talk about
    algorithms.
 
-  1.3 What is debugging?
+1.3  What is debugging?
 
    Programming is error-prone. For whimsical reasons, programming errors are called bugs
    and the process of tracking them down is called debugging.
@@ -238,22 +139,22 @@
    semantic errors. It is useful to distinguish between them in order to track them down
    more quickly.
 
-    1.3.1 Syntax errors
+1.3.1  Syntax errors
 
    Python can only execute a program if the syntax is correct; otherwise, the interpreter
    displays an error message. Syntax refers to the structure of a program and the rules
-   about that structure. In mathematical operations, for example, parentheses have to
-   come in matching pairs; so (4 + 5) * 10 is legal, but 8) is a syntax error.
+   about that structure. For example, parentheses have to come in matching pairs, so (1 +
+   2) is legal, but 8) is a syntax error.
 
    In English, readers can tolerate most syntax errors, which is why we can read the
-   poetry of e e cummings without spewing error messages. Python is not so forgiving.
+   poetry of e. e. cummings without spewing error messages. Python is not so forgiving.
    If there is a single syntax error anywhere in your program, Python will display an
    error message and quit, and you will not be able to run your program. During the first
    few weeks of your programming career, you will probably spend a lot of time tracking
    down syntax errors. As you gain experience, you will make fewer errors and find them
    faster.
 
-    1.3.2 Runtime errors
+1.3.2  Runtime errors
 
    The second type of error is a runtime error, so called because the error does not
    appear until after the program has started running. These errors are also called
@@ -263,7 +164,7 @@
    Runtime errors are rare in the simple programs you will see in the first few chapters,
    so it might be a while before you encounter one.
 
-    1.3.3 Semantic errors
+1.3.3  Semantic errors
 
    The third type of error is the semantic error. If there is a semantic error in your
    program, it will run successfully in the sense that the computer will not generate any
@@ -275,7 +176,7 @@
    tricky because it requires you to work backward by looking at the output of the
    program and trying to figure out what it is doing.
 
-    1.3.4 Experimental debugging
+1.3.4  Experimental debugging
 
    One of the most important skills you will acquire is debugging. Although it can be
    frustrating, debugging is one of the most intellectually rich, challenging, and
@@ -288,11 +189,8 @@
    going wrong, you modify your program and try again. If your hypothesis was correct,
    then you can predict the result of the modification, and you take a step closer to a
    working program. If your hypothesis was wrong, you have to come up with a new one. As
-   Sherlock Holmes pointed out,
-
-     “When you have eliminated the impossible, whatever
-     remains, however improbable, must be the truth.”
-     —A. Conan Doyle, The Sign of Four
+   Sherlock Holmes pointed out, “When you have eliminated the impossible, whatever
+   remains, however improbable, must be the truth.” (A. Conan Doyle, The Sign of Four)
 
    For some people, programming and debugging are the same thing. That is, programming is
    the process of gradually debugging a program until it does what you want. The idea is
@@ -301,17 +199,14 @@
 
    For example, Linux is an operating system that contains thousands of lines of code,
    but it started out as a simple program Linus Torvalds used to explore the Intel 80386
-   chip. According to Larry Greenfield,
-
-     “One of Linus’s earlier projects was a program that would
-     switch between printing AAAA and BBBB. This later evolved
-     to Linux.”
-     —The Linux Users’ Guide, Beta Version 1
+   chip. According to Larry Greenfield, “One of Linus’s earlier projects was a program
+   that would switch between printing AAAA and BBBB. This later evolved to Linux.” (The
+   Linux Users’ Guide Beta Version 1).
 
    Later chapters will make more suggestions about debugging and other programming
    practices.
 
-  1.4 Formal and natural languages
+1.4  Formal and natural languages
 
    Natural languages are the languages people speak, such as English, Spanish, and
    French. They were not designed by people (although people try to impose some order on
@@ -323,23 +218,27 @@
    formal language to represent the chemical structure of molecules. And most
    importantly:
 
-        Programming languages are formal languages that have been designed
-        to express computations.
+     Programming languages are formal languages that have been designed to express
+     computations.
 
    Formal languages tend to have strict rules about syntax. For example, 3 + 3 = 6 is a
-   syntactically correct mathematical statement, but 3+ = 3$6 is not. H₂O is a
-   syntactically correct chemical formula, but ₂Zz is not.
+   syntactically correct mathematical statement, but 3 + = 3 $ 6 is not. H[2]O is a
+   syntactically correct chemical formula, but [2]Zz is not.
 
    Syntax rules come in two flavors, pertaining to tokens and structure. Tokens are the
    basic elements of the language, such as words, numbers, and chemical elements. One of
-   the problems with 3+ = 3$6 is that $ is not a legal token in mathematics (at least
-   as far as I know). Similarly, ₂Zz is not legal because there is no element with the
+   the problems with 3 + = 3 $ 6 is that $ is not a legal token in mathematics (at least
+   as far as I know). Similarly, [2]Zz is not legal because there is no element with the
    abbreviation Zz.
 
    The second type of syntax rule pertains to the structure of a statement; that is, the
-   way the tokens are arranged. The statement 3+ = 3 is illegal because even though +
+   way the tokens are arranged. The statement 3 + = 3 is illegal because even though +
    and = are legal tokens, you can’t have one right after the other. Similarly, in a
    chemical formula the subscript comes after the element name, not before.
+   Exercise 1
+
+   Write a well-structured English sentence with invalid tokens in it. Then write another
+   sentence with all valid tokens but with invalid structure.
 
    When you read a sentence in English or a statement in a formal language, you have to
    figure out what the structure of the sentence is (although in a natural language you
@@ -397,7 +296,7 @@
    the details matter. Small errors in spelling and punctuation, which you can get away
    with in natural languages, can make a big difference in a formal language.
 
-  1.5 The first program
+1.5  The first program
 
    Traditionally, the first program you write in a new language is called “Hello, World!”
    because all it does is display the words “Hello, World!”. In Python, it looks like
@@ -411,7 +310,17 @@
    The quotation marks in the program mark the beginning and end of the text to be
    displayed; they don’t appear in the result.
 
-  1.6 Debugging
+   In Python 3, the syntax for printing is slightly different:
+print('Hello, World!')
+
+   The parentheses indicate that print is a function. We’ll get to functions in
+   Chapter [8]3.
+
+   For the rest of this book, I’ll use the print statement. If you are using Python 3,
+   you will have to translate. But other than that, there are very few differences we
+   have to worry about.
+
+1.6  Debugging
 
    It is a good idea to read this book in front of a computer so you can try out the
    examples as you go. You can run most of the examples in interactive mode, but if you
@@ -425,19 +334,214 @@
    debugging, because you get to know what the error messages mean. It is better to make
    mistakes now and on purpose than later and accidentally.
 
+   Programming, and especially debugging, sometimes brings out strong emotions. If you
+   are struggling with a difficult bug, you might feel angry, despondent or embarrassed.
+
+   There is evidence that people naturally respond to computers as if they were people.
+   When they work well, we think of them as teammates, and when they are obstinate or
+   rude, we respond to them the same way we respond to rude, obstinate people (Reeves and
+   Nass, The Media Equation: How People Treat Computers, Television, and New Media Like
+   Real People and Places).
+
+   Preparing for these reactions might help you deal with them. One approach is to think
+   of the computer as an employee with certain strengths, like speed and precision, and
+   particular weaknesses, like lack of empathy and inability to grasp the big picture.
+
+   Your job is to be a good manager: find ways to take advantage of the strengths and
+   mitigate the weaknesses. And find ways to use your emotions to engage with the
+   problem, without letting your reactions interfere with your ability to work
+   effectively.
+
+   Learning to debug can be frustrating, but it is a valuable skill that is useful for
+   many activities beyond programming. At the end of each chapter there is a debugging
+   section, like this one, with my thoughts about debugging. I hope they help!
+
+1.7  Glossary
+
+   problem solving:
+          The process of formulating a problem, finding a solution, and expressing the
+          solution.
+
+   high-level language:
+          A programming language like Python that is designed to be easy for humans to
+          read and write.
+
+   low-level language:
+          A programming language that is designed to be easy for a computer to execute;
+          also called “machine language” or “assembly language.”
+
+   portability:
+          A property of a program that can run on more than one kind of computer.
+
+   interpret:
+          To execute a program in a high-level language by translating it one line at a
+          time.
+
+   compile:
+          To translate a program written in a high-level language into a low-level
+          language all at once, in preparation for later execution.
+
+   source code:
+          A program in a high-level language before being compiled.
+
+   object code:
+          The output of the compiler after it translates the program.
+
+   executable:
+          Another name for object code that is ready to be executed.
+
+   prompt:
+          Characters displayed by the interpreter to indicate that it is ready to take
+          input from the user.
+
+   script:
+          A program stored in a file (usually one that will be interpreted).
+
+   interactive mode:
+          A way of using the Python interpreter by typing commands and expressions at the
+          prompt.
+
+   script mode:
+          A way of using the Python interpreter to read and execute statements in a
+          script.
+
+   program:
+          A set of instructions that specifies a computation.
+
+   algorithm:
+          A general process for solving a category of problems.
+
+   bug:
+          An error in a program.
+
+   debugging:
+          The process of finding and removing any of the three kinds of programming
+          errors.
+
+   syntax:
+          The structure of a program.
+
+   syntax error:
+          An error in a program that makes it impossible to parse (and therefore
+          impossible to interpret).
+
+   exception:
+          An error that is detected while the program is running.
+
+   semantics:
+          The meaning of a program.
+
+   semantic error:
+          An error in a program that makes it do something other than what the programmer
+          intended.
+
+   natural language:
+          Any one of the languages that people speak that evolved naturally.
+
+   formal language:
+          Any one of the languages that people have designed for specific purposes, such
+          as representing mathematical ideas or computer programs; all programming
+          languages are formal languages.
+
+   token:
+          One of the basic elements of the syntactic structure of a program, analogous to
+          a word in a natural language.
+
+   parse:
+          To examine a program and analyze the syntactic structure.
+
+   print statement:
+          An instruction that causes the Python interpreter to display a value on the
+          screen.
+
+1.8  Exercises
+
+   Exercise 2
+
+   Use a web browser to go to the Python website [9]http://python.org. This page contains
+   information about Python and links to Python-related pages, and it gives you the
+   ability to search the Python documentation.
+
+   For example, if you enter print in the search window, the first link that appears is
+   the documentation of the print statement. At this point, not all of it will make sense
+   to you, but it is good to know where it is.
+   Exercise 3
+
+   Start the Python interpreter and type help() to start the online help utility. Or you
+   can type help('print') to get information about the print statement.
+
+   If this example doesn’t work, you may need to install additional Python documentation
+   or set an environment variable; the details depend on your operating system and
+   version of Python.
+   Exercise 4
+
+   Start the Python interpreter and use it as a calculator. Python’s syntax for math
+   operations is almost the same as standard mathematical notation. For example, the
+   symbols +, - and / denote addition, subtraction and division, as you would expect. The
+   symbol for multiplication is *.
+
+   If you run a 10 kilometer race in 43 minutes 30 seconds, what is your average time per
+   mile? What is your average speed in miles per hour? (Hint: there are 1.61 kilometers
+   in a mile).
+
+   [10]Buy this book at Amazon.com
+
+Contribute
+
+   If you would like to make a contribution to support my books, you can use the button
+   below. Thank you!
+   Pay what you want:
+   [Small $1.00 USD____]
+   PayPal - The safer, easier way to pay online!
+
+Are you using one of our books in a class?
+
+   We'd like to know about it. Please consider filling out [11]this short survey.
+
+   [12]Think Bayes
+
+   [13][q?_encoding=UTF8&amp;ASIN=1449370780&amp;Format=_SL160_&amp;ID=AsinImage&amp;Mark
+   etPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=greenteapre01-20]
+
+   [14]Think Python
+
+   [15][q?_encoding=UTF8&amp;ASIN=144933072X&amp;Format=_SL160_&amp;ID=AsinImage&amp;Mark
+   etPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=greenteapre01-20]
+
+   [16]Think Stats
+
+   [17][q?_encoding=UTF8&amp;ASIN=1491907339&amp;Format=_SL160_&amp;ID=AsinImage&amp;Mark
+   etPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=greenteapre01-20]
+
+   [18]Think Complexity
+
+   [19][q?_encoding=UTF8&amp;ASIN=1449314635&amp;Format=_SL160_&amp;ID=AsinImage&amp;Mark
+   etPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=greenteapre01-20]
+     _________________________________________________________________________________
+
+   [20]Previous [21]Up [22]Next
+
 References
 
-   1. https://twitter.com/hashtag/100DaysOfLinux
-   2. https://greenteapress.com/wp/think-python/
-   3. https://dillinger.io/
-   4. https://twitter.com/HeikoBlomenkamp
-   5. https://github.com/HeikoBlomenkamp/100-days-of-linux/blob/master/source/blomenk_downey.patch
-   6. https://creativecommons.org/licenses/by-nc/3.0/
-   7. http://blomenk.bplaced.net/thinkpython2/#Preface
-   8. http://blomenk.bplaced.net/thinkpython2/#1_The_way_of_the_program
-   9. http://blomenk.bplaced.net/thinkpython2/#11_The_Python_programming_language
-  10. http://blomenk.bplaced.net/thinkpython2/#12_What_is_a_program
-  11. http://blomenk.bplaced.net/thinkpython2/#13_What_is_debugging
-  12. http://blomenk.bplaced.net/thinkpython2/#14_Formal_and_natural_languages
-  13. http://blomenk.bplaced.net/thinkpython2/#15_The_first_program
-  14. http://blomenk.bplaced.net/thinkpython2/#16_Debugging
+   1. https://greenteapress.com/thinkpython/html/thinkpython001.html
+   2. https://greenteapress.com/thinkpython/html/index.html
+   3. https://greenteapress.com/thinkpython/html/thinkpython003.html
+   4. http://amzn.to/Owtmjy
+   5. https://greenteapress.com/thinkpython/html/thinkpython002.html#fig.interpret
+   6. https://greenteapress.com/thinkpython/html/thinkpython002.html#fig.compile
+   7. http://python.org/
+   8. https://greenteapress.com/thinkpython/html/thinkpython004.html#funcchap
+   9. http://python.org/
+  10. http://amzn.to/Owtmjy
+  11. http://spreadsheets.google.com/viewform?formkey=dC0tNUZkMjBEdXVoRGljNm9FRmlTMHc6MA
+  12. http://www.amazon.com/gp/product/1449370780/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1449370780&linkCode=as2&tag=greenteapre01-20
+  13. http://www.amazon.com/gp/product/1449370780/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=1789&creative=9325&creativeASIN=1449370780&linkCode=as2&tag=greenteapre01-20
+  14. http://www.amazon.com/gp/product/144933072X/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=144933072X&linkCode=as2&tag=greenteapre01-20
+  15. http://www.amazon.com/gp/product/144933072X/ref=as_li_tf_il?ie=UTF8&camp=1789&creative=9325&creativeASIN=144933072X&linkCode=as2&tag=greenteapre01-20
+  16. http://www.amazon.com/gp/product/1491907339/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1491907339&linkCode=as2&tag=greenteapre01-20&linkId=O7WYM6H6YBYUFNWU
+  17. http://www.amazon.com/gp/product/1491907339/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1491907339&linkCode=as2&tag=greenteapre01-20&linkId=JVSYKQHYSUIEYRHL
+  18. http://www.amazon.com/gp/product/1449314635/ref=as_li_tf_tl?ie=UTF8&tag=greenteapre01-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=1449314635
+  19. http://www.amazon.com/gp/product/1449314635/ref=as_li_tf_il?ie=UTF8&camp=1789&creative=9325&creativeASIN=1449314635&linkCode=as2&tag=greenteapre01-20
+  20. https://greenteapress.com/thinkpython/html/thinkpython001.html
+  21. https://greenteapress.com/thinkpython/html/index.html
+  22. https://greenteapress.com/thinkpython/html/thinkpython003.html
