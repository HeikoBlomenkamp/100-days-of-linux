
// $Id: thinkpython2.md,v 2.2 2021/09/09 13:03:51 heiko Exp $
//
// $Log: thinkpython2.md,v $
// Revision 2.2  2021/09/09 13:03:51  heiko
// R2D10: Added link to Think Python source diff file.
//
// Revision 2.1  2021/09/03 14:04:04  heiko
// R2D4: Added Section 1.5 (The first program).
//
// Revision 1.19  2021/08/09 23:04:32  heiko
// R1D79: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.18  2021/08/08 23:18:48  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.17  2021/08/08 23:09:08  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.16  2021/08/08 22:15:53  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.15  2021/08/08 21:23:00  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.14  2021/08/08 21:13:54  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.13  2021/08/07 22:53:20  heiko
// R1D77: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.12  2021/08/05 00:58:40  heiko
// R1D74: Added Section 1.4 (Formal and natural languages).
//
// Revision 1.11  2021/06/15 01:06:13  heiko
// R1D23: Added Section 1.3.4 (Experimental debugging).
//
// Revision 1.10  2021/06/09 17:52:37  heiko
// R1D18: Added Section 1.3.3 (Semantic errors).
//
// Revision 1.9  2021/06/05 17:58:14  heiko
// R1D14: Added Section 1.3.2 (Runtime errors).
//
// Revision 1.8  2021/06/04 21:59:09  heiko
// R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
//
// Revision 1.7  2021/06/02 20:22:52  heiko
// R1D11: Modified the alt attributes of two images.
//
// Revision 1.6  2021/06/01 06:54:26  heiko
// R1D10: Finished Section 1.4 (Formal and natural languages).
//
// Revision 1.5  2021/05/30 14:04:29  heiko
// R1D8: Finished Section 1.3 (What is debugging?).
//
// Revision 1.4  2021/05/28 12:07:58  heiko
// R1D6: Added Section 1.3.1 (Syntax errors).
//
// Revision 1.3  2021/05/26 18:12:08  heiko
// R1D4: Finished Section 1.2 (What is a program?).
//
// Revision 1.2  2021/05/23 19:11:26  heiko
// R1D1: Finished Section 1.1 (The Python programming language).
//
// Revision 1.1  2021/05/23 16:07:38  heiko
// Initial revision
//

   [1]#100DaysOfLinux :: ROUND 1 DAY 1–100

   Markdown Version of “Think Python First Edition”

   Think Python First Edition is available at
   [2]https://greenteapress.com/wp/think-python/.
   Styled HTML generated by [3]Dillinger.

   Challenge started on May 23, 2021.
   [4]@HeikoBlomenkamp

                     Think Python: How to Think Like a Computer Scientist

   Allen B. Downey
   First Edition (which uses Python 2), Version 2.0.17

   Copyright © 2017 Allen B. Downey.
   [5]Modifications by Heiko Blomenkamp.

   Permission is granted to copy, distribute, and/or modify this work under the terms of
   the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
   available at [6]http://creativecommons.org/licenses/by-nc/3.0/.
     * [7]Preface
     * [8]The way of the program
          + [9]The Python programming language
          + [10]What is a program?
          + [11]What is debugging?
          + [12]Formal and natural languages
          + [13]The first program
          + [14]Debugging

Preface

   [postponed]
   [version: python -V]

1. The way of the program

   The goal of this book is to teach you to think like a computer scientist. This way of
   thinking combines some of the best features of mathematics, engineering, and natural
   science. Like mathematicians, computer scientists use formal languages to denote ideas
   (specifically computations). Like engineers, they design things, assembling components
   into systems and evaluating tradeoffs among alternatives. Like scientists, they
   observe the behavior of complex systems, form hypotheses, and test predictions.

   The single most important skill for a computer scientist is problem solving. Problem
   solving means the ability to formulate problems, think creatively about solutions, and
   express a solution clearly and accurately. As it turns out, the process of learning to
   program is an excellent opportunity to practice problem-solving skills. That’s why
   this chapter is called, “The way of the program.”

   On one level, you will be learning to program, a useful skill by itself. On another
   level, you will use programming as a means to an end. As we go along, that end will
   become clearer.

  1.1 The Python programming language

   The programming language you will learn is Python. Python is an example of a
   high-level language; other high-level languages you might have heard of are C, C++,
   Perl, and Java.

   There are also low-level languages, sometimes referred to as “machine languages” or
   “assembly languages.” Loosely speaking, computers can only run programs written in
   low-level languages. So programs written in a high-level language have to be processed
   before they can run. This extra processing takes some time, which is a small
   disadvantage of high-level languages.

   The advantages are enormous. First, it is much easier to program in a high-level
   language. Programs written in a high-level language take less time to write, they are
   shorter and easier to read, and they are more likely to be correct. Second, high-level
   languages are portable, meaning that they can run on different kinds of computers with
   few or no modifications. Low-level programs can run on only one kind of computer and
   have to be rewritten to run on another.

   Due to these advantages, almost all programs are written in high-level languages.
   Low-level languages are used only for a few specialized applications.

   Two kinds of programs process high-level languages into low-level languages:
   interpreters and compilers. An interpreter reads a high-level program and executes it,
   meaning that it does what the program says. It processes the program a little at a
   time, alternately reading lines and performing computations. Figure 1.1 shows the
   structure of an interpreter.

   Figure 1.1
          An interpreter processes the program a little at a time,
          alternately reading lines and performing computations.

               From: Source Code to: Interpreter to: Output.

   A compiler reads the program and translates it completely before the program starts
   running. In this context, the high-level program is called the source code, and the
   translated program is called the object code or the executable. Once a program is
   compiled, you can execute it repeatedly without further translation. Figure 1.2
   shows the structure of a compiler.

   Figure 1.2
          A compiler translates source code into object code,
          which is run by a hardware executor.

     From: Source Code to: Compiler to: Object Code to: Executor to: Output.

   Python is considered an interpreted language because Python programs are executed by
   an interpreter. There are two ways to use the interpreter: interactive mode and script
   mode. In interactive mode, you type Python programs and the interpreter displays the
   result:
>>> 1 + 1
2

   The chevron, >>> , is the prompt the interpreter uses to indicate that it is ready. If
   you type 1 + 1 , the interpreter replies 2 .

   Alternatively, you can store code in a file and use the interpreter to execute the
   contents of the file, which is called a script. By convention, Python scripts have
   names that end with .py .

   To execute the script, you have to tell the interpreter the name of the file. If you
   have a script named dinsdale.py and you are working in a *NIX command window, you type
   python dinsdale.py . In other development environments, the details of executing
   scripts are different. You can find instructions for your environment at the Python
   website http://python.org .

   Working in interactive mode is convenient for testing small pieces of code because you
   can type and execute them immediately. But for anything more than a few lines, you
   should save your code as a script so you can modify and execute it in the future.

  1.2 What is a program?

   A program is a sequence of instructions that specifies how to perform a computation.
   The computation might be something mathematical, such as solving a system of equations
   or finding the roots of a polynomial, but it can also be a symbolic computation, such
   as searching and replacing text in a document or (strangely enough) compiling a
   program.

   The details look different in different languages, but a few basic instructions appear
   in just about every language:

   input:
          Get data from the keyboard, a file, or some other device.

   output:
          Display data on the screen or send data to a file or other device.

   math:
          Perform basic mathematical operations like addition and multiplication.

   conditional execution:
          Check for certain conditions and execute the appropriate code.

   repetition:
          Perform some action repeatedly, usually with some variation.

   Believe it or not, that’s pretty much all there is to it. Every program you’ve ever
   used, no matter how complicated, is made up of instructions that look pretty much like
   these. So you can think of programming as the process of breaking a large, complex
   task into smaller and smaller subtasks until the subtasks are simple enough to be
   performed with one of these basic instructions.

   That may be a little vague, but we will come back to this topic when we talk about
   algorithms.

  1.3 What is debugging?

   Programming is error-prone. For whimsical reasons, programming errors are called bugs
   and the process of tracking them down is called debugging.

   Three kinds of errors can occur in a program: syntax errors, runtime errors, and
   semantic errors. It is useful to distinguish between them in order to track them down
   more quickly.

    1.3.1 Syntax errors

   Python can only execute a program if the syntax is correct; otherwise, the interpreter
   displays an error message. Syntax refers to the structure of a program and the rules
   about that structure. In mathematical operations, for example, parentheses have to
   come in matching pairs; so (4 + 5) * 10 is legal, but 8) is a syntax error.

   In English, readers can tolerate most syntax errors, which is why we can read the
   poetry of e e cummings without spewing error messages. Python is not so forgiving.
   If there is a single syntax error anywhere in your program, Python will display an
   error message and quit, and you will not be able to run your program. During the first
   few weeks of your programming career, you will probably spend a lot of time tracking
   down syntax errors. As you gain experience, you will make fewer errors and find them
   faster.

    1.3.2 Runtime errors

   The second type of error is a runtime error, so called because the error does not
   appear until after the program has started running. These errors are also called
   exceptions because they usually indicate that something exceptional (and bad) has
   happened.

   Runtime errors are rare in the simple programs you will see in the first few chapters,
   so it might be a while before you encounter one.

    1.3.3 Semantic errors

   The third type of error is the semantic error. If there is a semantic error in your
   program, it will run successfully in the sense that the computer will not generate any
   error messages, but it will not do the right thing. It will do something else.
   Specifically, it will do what you told it to do.

   The problem is that the program you wrote is not the program you wanted to write. The
   meaning of the program (its semantics) is wrong. Identifying semantic errors can be
   tricky because it requires you to work backward by looking at the output of the
   program and trying to figure out what it is doing.

    1.3.4 Experimental debugging

   One of the most important skills you will acquire is debugging. Although it can be
   frustrating, debugging is one of the most intellectually rich, challenging, and
   interesting parts of programming.

   In some ways, debugging is like detective work. You are confronted with clues, and you
   have to infer the processes and events that led to the results you see.

   Debugging is also like an experimental science. Once you have an idea about what is
   going wrong, you modify your program and try again. If your hypothesis was correct,
   then you can predict the result of the modification, and you take a step closer to a
   working program. If your hypothesis was wrong, you have to come up with a new one. As
   Sherlock Holmes pointed out,

     “When you have eliminated the impossible, whatever
     remains, however improbable, must be the truth.”
     —A. Conan Doyle, The Sign of Four

   For some people, programming and debugging are the same thing. That is, programming is
   the process of gradually debugging a program until it does what you want. The idea is
   that you should start with a program that does something and make small modifications,
   debugging them as you go, so that you always have a working program.

   For example, Linux is an operating system that contains thousands of lines of code,
   but it started out as a simple program Linus Torvalds used to explore the Intel 80386
   chip. According to Larry Greenfield,

     “One of Linus’s earlier projects was a program that would
     switch between printing AAAA and BBBB. This later evolved
     to Linux.”
     —The Linux Users’ Guide, Beta Version 1

   Later chapters will make more suggestions about debugging and other programming
   practices.

  1.4 Formal and natural languages

   Natural languages are the languages people speak, such as English, Spanish, and
   French. They were not designed by people (although people try to impose some order on
   them); they evolved naturally.

   Formal languages are languages that are designed by people for specific applications.
   For example, the notation that mathematicians use is a formal language that is
   particularly good at denoting relationships among numbers and symbols. Chemists use a
   formal language to represent the chemical structure of molecules. And most
   importantly:

        Programming languages are formal languages that have been designed
        to express computations.

   Formal languages tend to have strict rules about syntax. For example, 3 + 3 = 6 is a
   syntactically correct mathematical statement, but 3+ = 3$6 is not. H₂O is a
   syntactically correct chemical formula, but ₂Zz is not.

   Syntax rules come in two flavors, pertaining to tokens and structure. Tokens are the
   basic elements of the language, such as words, numbers, and chemical elements. One of
   the problems with 3+ = 3$6 is that $ is not a legal token in mathematics (at least
   as far as I know). Similarly, ₂Zz is not legal because there is no element with the
   abbreviation Zz.

   The second type of syntax rule pertains to the structure of a statement; that is, the
   way the tokens are arranged. The statement 3+ = 3 is illegal because even though +
   and = are legal tokens, you can’t have one right after the other. Similarly, in a
   chemical formula the subscript comes after the element name, not before.

   When you read a sentence in English or a statement in a formal language, you have to
   figure out what the structure of the sentence is (although in a natural language you
   do this subconsciously). This process is called parsing.

   For example, when you hear the sentence, “The penny dropped,” you understand that “the
   penny” is the subject and “dropped” is the predicate. Once you have parsed a sentence,
   you can figure out what it means, or the semantics of the sentence. Assuming that you
   know what a penny is and what it means to drop, you will understand the general
   implication of this sentence.

   Although formal and natural languages have many features in common—tokens, structure,
   syntax, and semantics—there are some differences:

   ambiguity:
          Natural languages are full of ambiguity, which people deal with by using
          contextual clues and other information. Formal languages are designed to be
          nearly or completely unambiguous, which means that any statement has exactly
          one meaning, regardless of context.

   redundancy:
          In order to make up for ambiguity and reduce misunderstandings, natural
          languages employ lots of redundancy. As a result, they are often verbose.
          Formal languages are less redundant and more concise.

   literalness:
          Natural languages are full of idiom and metaphor. If I say, “The penny
          dropped,” there is probably no penny and nothing dropping (this idiom means
          that someone realized something after a period of confusion). Formal languages
          mean exactly what they say.

   People who grow up speaking a natural language—everyone—often have a hard time
   adjusting to formal languages. In some ways, the difference between formal and natural
   language is like the difference between poetry and prose, but more so:

   Poetry:
          Words are used for their sounds as well as for their meaning, and the whole
          poem together creates an effect or emotional response. Ambiguity is not only
          common but often deliberate.

   Prose:
          The literal meaning of words is more important, and the structure contributes
          more meaning. Prose is more amenable to analysis than poetry but still often
          ambiguous.

   Programs:
          The meaning of a computer program is unambiguous and literal, and can be
          understood entirely by analysis of the tokens and structure.

   Here are some suggestions for reading programs (and other formal languages). First,
   remember that formal languages are much more dense than natural languages, so it takes
   longer to read them. Also, the structure is very important, so it is usually not a
   good idea to read from top to bottom, left to right. Instead, learn to parse the
   program in your head, identifying the tokens and interpreting the structure. Finally,
   the details matter. Small errors in spelling and punctuation, which you can get away
   with in natural languages, can make a big difference in a formal language.

  1.5 The first program

   Traditionally, the first program you write in a new language is called “Hello, World!”
   because all it does is display the words “Hello, World!”. In Python, it looks like
   this:
print 'Hello, World!'

   This is an example of a print statement, which doesn’t actually print anything on
   paper. It displays a value on the screen. In this case, the result is the words
Hello, World!

   The quotation marks in the program mark the beginning and end of the text to be
   displayed; they don’t appear in the result.

  1.6 Debugging

   […]

References

   1. https://twitter.com/hashtag/100DaysOfLinux
   2. https://greenteapress.com/wp/think-python/
   3. https://dillinger.io/
   4. https://twitter.com/HeikoBlomenkamp
   5. https://github.com/HeikoBlomenkamp/100-days-of-linux/blob/master/source/blomenk_downey.patch
   6. https://creativecommons.org/licenses/by-nc/3.0/
   7. http://blomenk.bplaced.net/thinkpython2/#Preface
   8. http://blomenk.bplaced.net/thinkpython2/#1_The_way_of_the_program
   9. http://blomenk.bplaced.net/thinkpython2/#11_The_Python_programming_language
  10. http://blomenk.bplaced.net/thinkpython2/#12_What_is_a_program
  11. http://blomenk.bplaced.net/thinkpython2/#13_What_is_debugging
  12. http://blomenk.bplaced.net/thinkpython2/#14_Formal_and_natural_languages
  13. http://blomenk.bplaced.net/thinkpython2/#15_The_first_program
  14. http://blomenk.bplaced.net/thinkpython2/#16_Debugging
