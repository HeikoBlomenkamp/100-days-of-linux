--- thinkbash.md	2021-09-08 19:40:30.980636510 +0200
+++ ../python2/thinkpython2.md	2021-09-03 16:04:58.083756157 +0200
@@ -1,61 +1,75 @@
 ```
-// $Id: thinkbash.md,v 2.2 2021/09/08 17:39:11 heiko Exp $
+// $Id: thinkpython2.md,v 2.1 2021/09/03 14:04:04 heiko Exp $
 //
-// $Log: thinkbash.md,v $
-// Revision 2.2  2021/09/08 17:39:11  heiko
-// R2D9: Added Section 1.5 (The first program).
+// $Log: thinkpython2.md,v $
+// Revision 2.1  2021/09/03 14:04:04  heiko
+// R2D4: Added Section 1.5 (The first program).
 //
-// Revision 2.1  2021/09/01 04:15:24  heiko
-// R2D2: Added Section 1.4 (Formal and natural languages).
+// Revision 1.19  2021/08/09 23:04:32  heiko
+// R1D79: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.13  2021/08/23 16:48:17  heiko
-// R1D93: Modified columns per line (lynx dump: 95 cpl).
+// Revision 1.18  2021/08/08 23:18:48  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.12  2021/08/23 16:41:57  heiko
-// R1D93: Modified columns per line (lynx dump: 95 cpl).
+// Revision 1.17  2021/08/08 23:09:08  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.11  2021/06/18 23:28:22  heiko
-// R1D27: Added Section 1.3.4 (Experimental debugging).
+// Revision 1.16  2021/08/08 22:15:53  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.10  2021/06/14 00:04:18  heiko
-// R1D22: Added Section 1.3.3 (Semantic errors).
+// Revision 1.15  2021/08/08 21:23:00  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.9  2021/06/09 00:28:53  heiko
-// R1D17: Added Section 1.3.2 (Runtime errors).
+// Revision 1.14  2021/08/08 21:13:54  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.8  2021/05/31 12:40:51  heiko
-// R1D9: Added missing link.
+// Revision 1.13  2021/08/07 22:53:20  heiko
+// R1D77: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.7  2021/05/31 12:21:23  heiko
-// R1D9: Finished Section 1.3 (What is debugging?).
+// Revision 1.12  2021/08/05 00:58:40  heiko
+// R1D74: Added Section 1.4 (Formal and natural languages).
 //
-// Revision 1.6  2021/05/28 18:35:30  heiko
-// R1D6: Added Section 1.3.1 (Syntax errors).
+// Revision 1.11  2021/06/15 01:06:13  heiko
+// R1D23: Added Section 1.3.4 (Experimental debugging).
+//
+// Revision 1.10  2021/06/09 17:52:37  heiko
+// R1D18: Added Section 1.3.3 (Semantic errors).
+//
+// Revision 1.9  2021/06/05 17:58:14  heiko
+// R1D14: Added Section 1.3.2 (Runtime errors).
 //
-// Revision 1.5  2021/05/27 13:03:22  heiko
-// R1D5: Added Section 1.2 (What is a program?).
+// Revision 1.8  2021/06/04 21:59:09  heiko
+// R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
 //
-// Revision 1.4  2021/05/25 12:53:22  heiko
-// R1D3: Replaced debug mode with shell mode.
+// Revision 1.7  2021/06/02 20:22:52  heiko
+// R1D11: Modified the alt attributes of two images.
 //
-// Revision 1.3  2021/05/25 12:16:24  heiko
-// R1D3: Added some copyright information.
+// Revision 1.6  2021/06/01 06:54:26  heiko
+// R1D10: Finished Section 1.4 (Formal and natural languages).
+//
+// Revision 1.5  2021/05/30 14:04:29  heiko
+// R1D8: Finished Section 1.3 (What is debugging?).
+//
+// Revision 1.4  2021/05/28 12:07:58  heiko
+// R1D6: Added Section 1.3.1 (Syntax errors).
 //
-// Revision 1.2  2021/05/25 11:52:37  heiko
-// R1D3: Finished Section 1.1 (The Bash programming language).
+// Revision 1.3  2021/05/26 18:12:08  heiko
+// R1D4: Finished Section 1.2 (What is a program?).
 //
-// Revision 1.1  2021/05/23 16:10:34  heiko
+// Revision 1.2  2021/05/23 19:11:26  heiko
+// R1D1: Finished Section 1.1 (The Python programming language).
+//
+// Revision 1.1  2021/05/23 16:07:38  heiko
 // Initial revision
 //
 ```
 
 
 
-[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 2 DAY 2--100
+[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 1 DAY 1--100
 
-**Markdown Version of "Think Bash"**
+**Markdown Version of "Think Python First Edition"**
 
-Adapted from Allen B. Downey's "Think Python First Edition".
 Think Python First Edition is available at https://greenteapress.com/wp/think-python/.
 Styled HTML generated by [Dillinger](https://dillinger.io).
 
@@ -64,13 +78,12 @@
 
 
 
-# Think Bash: How to Think Like a Computer Scientist
+# Think Python: How to Think Like a Computer Scientist
 
-**Heiko Blomenkamp**
-First Edition (which uses GNU bash 5.1), Version 2.0.21
+**Allen B. Downey**
+First Edition (which uses Python 2), Version 2.0.17
 
-Think Python First Edition: Copyright (C) 2017 Allen B. Downey.
-Modifications (Think Bash): Copyright (C) 2021 Heiko Blomenkamp.
+Copyright (C) 2017 Allen B. Downey.
 
 Permission is granted to copy, distribute, and/or modify this work under the terms of
 the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
@@ -80,19 +93,18 @@
 
 - [Preface](#Preface)
 - [The way of the program](#1_The_way_of_the_program)
-    - [The Bash programming language](#11_The_Bash_programming_language)
+    - [The Python programming language](#11_The_Python_programming_language)
     - [What is a program?](#12_What_is_a_program)
     - [What is debugging?](#13_What_is_debugging)
     - [Formal and natural languages](#14_Formal_and_natural_languages)
     - [The first program](#15_The_first_program)
-    - [Debugging](#16_Debugging)
 
 
 
 ## Preface
 
 [postponed]
-`[PS1='\s(\W):\#:\j> ']`
+[version: python -V]
 
 
 
@@ -117,11 +129,11 @@
 
 
 
-### 1\.1 The Bash programming language
+### 1\.1 The Python programming language
 
-The programming language you will learn is Bash. Bash is an example of a
+The programming language you will learn is Python. Python is an example of a
 **high-level language**; other high-level languages you might have heard of are C, C++,
-Python, and Java.
+Perl, and Java.
 
 There are also **low-level languages**, sometimes referred to as "machine languages" or
 "assembly languages." Loosely speaking, computers can only run programs written in
@@ -163,28 +175,28 @@
 
 &#x00A0; ![From: Source Code to: Compiler to: Object Code to: Executor to: Output.](https://greenteapress.com/thinkpython/html/thinkpython002.png "Figure 1.2")
 
-Bash is considered an interpreted language because Bash programs are executed by
+Python is considered an interpreted language because Python programs are executed by
 an interpreter. There are two ways to use the interpreter: **interactive mode** and **script
-mode**. In interactive mode, you type Bash programs and the interpreter displays the
+mode**. In interactive mode, you type Python programs and the interpreter displays the
 result:
 
 ```
-bash(5.1.8):1:0> echo $((1 + 1))
+>>> 1 + 1
 2
 ```
 
-The expression `bash(5.1.8):1:0>` is the **prompt** the interpreter uses to indicate that it
-is ready. If you type `echo $((1 + 1))` , the interpreter replies `2` .
+The chevron, `>>>` , is the **prompt** the interpreter uses to indicate that it is ready. If
+you type `1 + 1` , the interpreter replies `2` .
 
 Alternatively, you can store code in a file and use the interpreter to execute the
-contents of the file, which is called a **script**. By convention, Bash scripts have
-names that end with `.sh` .
+contents of the file, which is called a **script**. By convention, Python scripts have
+names that end with `.py` .
 
 To execute the script, you have to tell the interpreter the name of the file. If you
-have a script named `dinsdale.sh` and you are working in a \*NIX command window, you type
-`bash dinsdale.sh` . In other development environments, the details of executing
-scripts are different. You can find instructions for your environment at the Bash
-website `http://gnu.org/software/bash` .
+have a script named `dinsdale.py` and you are working in a \*NIX command window, you type
+`python dinsdale.py` . In other development environments, the details of executing
+scripts are different. You can find instructions for your environment at the Python
+website `http://python.org` .
 
 Working in interactive mode is convenient for testing small pieces of code because you
 can type and execute them immediately. But for anything more than a few lines, you
@@ -242,14 +254,14 @@
 
 #### 1\.3\.1 Syntax errors
 
-Bash can only execute a program if the syntax is correct; otherwise, the interpreter
+Python can only execute a program if the syntax is correct; otherwise, the interpreter
 displays an error message. **Syntax** refers to the structure of a program and the rules
 about that structure. In mathematical operations, for example, parentheses have to
 come in matching pairs; so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.
 
 In English, readers can tolerate most syntax errors, which is why we can read the
-poetry of e e cummings without spewing error messages. Bash is not so forgiving.
-If there is a single syntax error anywhere in your program, Bash will display an
+poetry of e e cummings without spewing error messages. Python is not so forgiving.
+If there is a single syntax error anywhere in your program, Python will display an
 error message and quit, and you will not be able to run your program. During the first
 few weeks of your programming career, you will probably spend a lot of time tracking
 down syntax errors. As you gain experience, you will make fewer errors and find them
@@ -400,11 +412,11 @@
 understood entirely by analysis of the tokens and structure.
 
 Here are some suggestions for reading programs (and other formal languages). First,
-remember that formal languages are much more dense than natural languages, so it takes
+remember that formal languages are *much more dense* than natural languages, so it takes
 longer to read them. Also, the structure is very important, so it is usually not a
-good idea to read from top to bottom, left to right. Instead, learn to parse the
+good idea to read from top to bottom, left to right. Instead, *learn to parse* the
 program in your head, identifying the tokens and interpreting the structure. Finally,
-the details matter. Small errors in spelling and punctuation, which you can get away
+the details matter. Small errors in *spelling* and *punctuation*, which you can get away
 with in natural languages, can make a big difference in a formal language.
 
 
@@ -412,11 +424,11 @@
 ### 1\.5 The first program
 
 Traditionally, the first program you write in a new language is called "Hello, World!"
-because all it does is display the words "Hello, World!". In Bash, it looks like
+because all it does is display the words "Hello, World!". In Python, it looks like
 this:
 
-```sh
-echo 'Hello, World!'
+```py
+print 'Hello, World!'
 ```
 
 This is an example of a **print statement**, which doesn't actually print anything on
@@ -426,12 +438,6 @@
 Hello, World!
 ```
 
-The quotation marks in the program mark the beginning and end of the text to be
+The quotation marks in the program mark the *beginning* and *end* of the text to be
 displayed; they don't appear in the result.
 
-
-
-### 1\.6 Debugging
-
-[...]
-
