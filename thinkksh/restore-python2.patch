--- thinkksh.md	2021-10-13 12:02:31.133137067 +0200
+++ ../python2/thinkpython2.md	2021-09-15 19:04:04.324023705 +0200
@@ -1,55 +1,81 @@
 ```
-// $Id: thinkksh.md,v 2.6 2021/10/13 09:59:07 heiko Exp $
+// $Id: thinkpython2.md,v 2.3 2021/09/15 17:02:53 heiko Exp $
 //
-// $Log: thinkksh.md,v $
-// Revision 2.6  2021/10/13 09:59:07  heiko
-// R2D44: Deleted hint to second picture.
+// $Log: thinkpython2.md,v $
+// Revision 2.3  2021/09/15 17:02:53  heiko
+// R2D16: Added first part of Section 1.6 (Debugging).
 //
-// Revision 2.5  2021/10/13 09:39:58  heiko
-// R2D44: Deleted all links to pics; modyfied formatting.
+// Revision 2.2  2021/09/09 13:03:51  heiko
+// R2D10: Added link to Think Python source diff file.
 //
-// Revision 2.4  2021/09/07 15:21:53  heiko
-// R2D8: Modified a link.
+// Revision 2.1  2021/09/03 14:04:04  heiko
+// R2D4: Added Section 1.5 (The first program).
 //
-// Revision 2.3  2021/09/07 15:14:02  heiko
-// R2D8: Added Section 1.5 (The first program).
+// Revision 1.19  2021/08/09 23:04:32  heiko
+// R1D79: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 2.2  2021/08/31 02:23:07  heiko
-// R2D1: Modified the number of the round (1 -> 2).
+// Revision 1.18  2021/08/08 23:18:48  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 2.1  2021/08/31 02:10:38  heiko
-// R2D1: Added Section 1.4 (Formal and natural languages).
+// Revision 1.17  2021/08/08 23:09:08  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.7  2021/08/21 17:06:21  heiko
-// R1D91: Modified columns per line (lynx dump: 95 cpl).
+// Revision 1.16  2021/08/08 22:15:53  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.6  2021/08/21 16:56:07  heiko
-// R1D91: Modified columns per line (lynx dump: 95 cpl).
+// Revision 1.15  2021/08/08 21:23:00  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.5  2021/06/17 22:58:09  heiko
-// R1D26: Added Section 1.3.4 (Experimental debugging).
+// Revision 1.14  2021/08/08 21:13:54  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.4  2021/06/12 21:47:53  heiko
-// R1D21: Added Section 1.3.3 (Semantic errors).
+// Revision 1.13  2021/08/07 22:53:20  heiko
+// R1D77: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.3  2021/06/07 16:33:08  heiko
-// R1D16: Added Section 1.3.2 (Runtime errors).
+// Revision 1.12  2021/08/05 00:58:40  heiko
+// R1D74: Added Section 1.4 (Formal and natural languages).
 //
-// Revision 1.2  2021/05/31 12:13:01  heiko
-// R1D9: Finished Section 1.3 (What is debugging?).
+// Revision 1.11  2021/06/15 01:06:13  heiko
+// R1D23: Added Section 1.3.4 (Experimental debugging).
 //
-// Revision 1.1  2021/05/29 22:00:28  heiko
+// Revision 1.10  2021/06/09 17:52:37  heiko
+// R1D18: Added Section 1.3.3 (Semantic errors).
+//
+// Revision 1.9  2021/06/05 17:58:14  heiko
+// R1D14: Added Section 1.3.2 (Runtime errors).
+//
+// Revision 1.8  2021/06/04 21:59:09  heiko
+// R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
+//
+// Revision 1.7  2021/06/02 20:22:52  heiko
+// R1D11: Modified the alt attributes of two images.
+//
+// Revision 1.6  2021/06/01 06:54:26  heiko
+// R1D10: Finished Section 1.4 (Formal and natural languages).
+//
+// Revision 1.5  2021/05/30 14:04:29  heiko
+// R1D8: Finished Section 1.3 (What is debugging?).
+//
+// Revision 1.4  2021/05/28 12:07:58  heiko
+// R1D6: Added Section 1.3.1 (Syntax errors).
+//
+// Revision 1.3  2021/05/26 18:12:08  heiko
+// R1D4: Finished Section 1.2 (What is a program?).
+//
+// Revision 1.2  2021/05/23 19:11:26  heiko
+// R1D1: Finished Section 1.1 (The Python programming language).
+//
+// Revision 1.1  2021/05/23 16:07:38  heiko
 // Initial revision
 //
 ```
 
 
 
-[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 2 DAY 44
+[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 1 DAY 1--100
 
-**Markdown Version of "Think KSH"**
+**Markdown Version of "Think Python First Edition"**
 
-Adapted from Allen B. Downey's "Think Python First Edition".
 Think Python First Edition is available at https://greenteapress.com/wp/think-python/.
 Styled HTML generated by [Dillinger](https://dillinger.io).
 
@@ -58,15 +84,13 @@
 
 
 
-# Think KSH: How to Think Like a Computer Scientist
+# Think Python: How to Think Like a Computer Scientist
 
-**Heiko Blomenkamp**
-First Edition (which uses KSH 93u+), Version 2.0.21
+**Allen B. Downey**
+First Edition (which uses Python 2), Version 2.0.17
 
-Think Python First Edition: Copyright (C) 2017 Allen B. Downey.
-[Modifications](#) (Think KSH): Copyright (C) 2021 Heiko Blomenkamp.
-
-All rights reserved.
+Copyright (C) 2017 Allen B. Downey.
+[Modifications](https://github.com/HeikoBlomenkamp/100-days-of-linux/blob/master/source/blomenk_downey.patch) by Heiko Blomenkamp.
 
 Permission is granted to copy, distribute, and/or modify this work under the terms of
 the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
@@ -76,7 +100,7 @@
 
 - [Preface](#Preface)
 - [The way of the program](#1_The_way_of_the_program)
-    - [The KSH programming language](#11_The_KSH_programming_language)
+    - [The Python programming language](#11_The_Python_programming_language)
     - [What is a program?](#12_What_is_a_program)
     - [What is debugging?](#13_What_is_debugging)
     - [Formal and natural languages](#14_Formal_and_natural_languages)
@@ -88,7 +112,7 @@
 ## Preface
 
 [postponed]
-`[PS1='ksh(${PWD##*/}):${HISTCMD}:${TMOUT}> ']`
+[version: python -V]
 
 
 
@@ -113,9 +137,9 @@
 
 
 
-### 1\.1 The KSH programming language
+### 1\.1 The Python programming language
 
-The programming language you will learn is KSH. KSH is an example of a
+The programming language you will learn is Python. Python is an example of a
 **high-level language**; other high-level languages you might have heard of are C, C++,
 Perl, and Java.
 
@@ -136,37 +160,51 @@
 Low-level languages are used only for a few specialized applications.
 
 Two kinds of programs process high-level languages into low-level languages:
-**interpreters** and compilers. An interpreter reads a high-level program and executes it,
+**interpreters** and **compilers**. An interpreter reads a high-level program and executes it,
 meaning that it does what the program says. It processes the program a little at a
-time, alternately reading lines and performing computations.
+time, alternately reading lines and performing computations. Figure 1.1 shows the
+structure of an interpreter.
+
+**Figure 1.1**
+: **An interpreter processes the program a little at a time,
+alternately reading lines and performing computations.**
 
-A **compiler** reads the program and translates it completely before the program starts
+&#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0;![From: Source Code to: Interpreter to: Output.](https://greenteapress.com/thinkpython/html/thinkpython001.png "Figure 1.1")
+
+A compiler reads the program and translates it completely before the program starts
 running. In this context, the high-level program is called the **source code**, and the
 translated program is called the **object code** or the **executable**. Once a program is
-compiled, you can execute it repeatedly without further translation.
+compiled, you can execute it repeatedly without further translation. Figure 1.2
+shows the structure of a compiler.
+
+**Figure 1.2**
+: **A compiler translates source code into object code,
+which is run by a hardware executor.**
+
+&#x00A0; ![From: Source Code to: Compiler to: Object Code to: Executor to: Output.](https://greenteapress.com/thinkpython/html/thinkpython002.png "Figure 1.2")
 
-KSH is considered an interpreted language because KSH programs are executed by
+Python is considered an interpreted language because Python programs are executed by
 an interpreter. There are two ways to use the interpreter: **interactive mode** and **script
-mode**. In interactive mode, you type KSH programs and the interpreter displays the
+mode**. In interactive mode, you type Python programs and the interpreter displays the
 result:
 
 ```
-ksh(93u+):1:0> print $((1 + 1))
+>>> 1 + 1
 2
 ```
 
-The expression `ksh(93u+):1:0>` is the **prompt** the interpreter uses to indicate that it
-is ready. If you type `print $((1 + 1))` , the interpreter replies `2` .
+The chevron, `>>>` , is the **prompt** the interpreter uses to indicate that it is ready. If
+you type `1 + 1` , the interpreter replies `2` .
 
 Alternatively, you can store code in a file and use the interpreter to execute the
-contents of the file, which is called a **script**. By convention, KSH scripts have
-names that end with `.ksh` .
+contents of the file, which is called a **script**. By convention, Python scripts have
+names that end with `.py` .
 
 To execute the script, you have to tell the interpreter the name of the file. If you
-have a script named `dinsdale.ksh` and you are working in a \*NIX command window, you
-type `ksh dinsdale.ksh` . In other development environments, the details of executing
-scripts are different. You can find instructions for your environment at the KSH
-website `http://kornshell.com` .
+have a script named `dinsdale.py` and you are working in a \*NIX command window, you type
+`python dinsdale.py` . In other development environments, the details of executing
+scripts are different. You can find instructions for your environment at the Python
+website `http://python.org` .
 
 Working in interactive mode is convenient for testing small pieces of code because you
 can type and execute them immediately. But for anything more than a few lines, you
@@ -224,14 +262,14 @@
 
 #### 1\.3\.1 Syntax errors
 
-KSH can only execute a program if the syntax is correct; otherwise, the interpreter
+Python can only execute a program if the syntax is correct; otherwise, the interpreter
 displays an error message. **Syntax** refers to the structure of a program and the rules
 about that structure. In mathematical operations, for example, parentheses have to
 come in matching pairs; so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.
 
 In English, readers can tolerate most syntax errors, which is why we can read the
-poetry of e e cummings without spewing error messages. KSH is not so forgiving.
-If there is a single syntax error anywhere in your program, KSH will display an
+poetry of e e cummings without spewing error messages. Python is not so forgiving.
+If there is a single syntax error anywhere in your program, Python will display an
 error message and quit, and you will not be able to run your program. During the first
 few weeks of your programming career, you will probably spend a lot of time tracking
 down syntax errors. As you gain experience, you will make fewer errors and find them
@@ -394,10 +432,10 @@
 ### 1\.5 The first program
 
 Traditionally, the first program you write in a new language is called "Hello, World!"
-because all it does is display the words "Hello, World!". In KSH, it looks like
+because all it does is display the words "Hello, World!". In Python, it looks like
 this:
 
-```sh
+```py
 print 'Hello, World!'
 ```
 
@@ -415,5 +453,15 @@
 
 ### 1\.6 Debugging
 
-[...]
+It is a good idea to read this book in front of a computer so you can try out the
+examples as you go. You can run most of the examples in interactive mode, but if you
+put the code in a script, it is easier to try out variations.
+
+Whenever you are experimenting with a new feature, you should try to make mistakes.
+For example, in the "Hello, world!" program, what happens if you leave out one of the
+quotation marks? What if you leave out both? What if you spell `print` wrong?
+
+This kind of experiment helps you remember what you read; it also helps with
+debugging, because you get to know what the error messages mean. It is better to make
+mistakes now and on purpose than later and accidentally.
 
