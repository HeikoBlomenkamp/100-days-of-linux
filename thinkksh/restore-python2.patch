--- thinkksh.md	2021-05-31 14:14:07.232126068 +0200
+++ ../python2/thinkpython2.md	2021-05-30 16:05:47.144355846 +0200
@@ -1,11 +1,20 @@
 ```
-// $Id: thinkksh.md,v 1.2 2021/05/31 12:13:01 heiko Exp $
+// $Id: thinkpython2.md,v 1.5 2021/05/30 14:04:29 heiko Exp $
 //
-// $Log: thinkksh.md,v $
-// Revision 1.2  2021/05/31 12:13:01  heiko
-// R1D9: Finished Section 1.3 (What is debugging?).
+// $Log: thinkpython2.md,v $
+// Revision 1.5  2021/05/30 14:04:29  heiko
+// R1D8: Finished Section 1.3 (What is debugging?).
 //
-// Revision 1.1  2021/05/29 22:00:28  heiko
+// Revision 1.4  2021/05/28 12:07:58  heiko
+// R1D6: Added Section 1.3.1 (Syntax errors).
+//
+// Revision 1.3  2021/05/26 18:12:08  heiko
+// R1D4: Finished Section 1.2 (What is a program?).
+//
+// Revision 1.2  2021/05/23 19:11:26  heiko
+// R1D1: Finished Section 1.1 (The Python programming language).
+//
+// Revision 1.1  2021/05/23 16:07:38  heiko
 // Initial revision
 //
 ```
@@ -14,9 +23,8 @@
 
 [\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 1 DAY 1--100
 
-**Markdown Version of "Think KSH"**
+**Markdown Version of "Think Python First Edition"**
 
-Adapted from Allen B. Downey's "Think Python First Edition".
 Think Python First Edition is available at https://greenteapress.com/wp/think-python/.
 Styled HTML generated by [Dillinger](https://dillinger.io).
 
@@ -25,13 +33,12 @@
 
 
 
-# Think KSH: How to Think Like a Computer Scientist
+# Think Python: How to Think Like a Computer Scientist
 
-**Heiko Blomenkamp**
-First Edition (which uses KSH 93u+), Version 2.0.21
+**Allen B. Downey**
+First Edition (which uses Python 2), Version 2.0.17
 
-Think Python First Edition: Copyright (C) 2017 Allen B. Downey.
-Modifications (Think KSH): Copyright (C) 2021 Heiko Blomenkamp.
+Copyright (C) 2017 Allen B. Downey.
 
 Permission is granted to copy, distribute, and/or modify this work under the terms of
 the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
@@ -41,18 +48,15 @@
 
 - [Preface](#Preface)
 - [The way of the program](#1_The_way_of_the_program)
-    - [The KSH programming language](#11_The_KSH_programming_language)
+    - [The Python programming language](#11_The_Python_programming_language)
     - [What is a program?](#12_What_is_a_program)
     - [What is debugging?](#13_What_is_debugging)
 
 
-
 ## Preface
 
 [postponed]
-`[PS1='ksh(${PWD##*/}):${HISTCMD}:${TMOUT}> ']`
-
-
+[version: python -V]
 
 
 ## 1\. The way of the program
@@ -61,7 +65,7 @@
 thinking combines some of the best features of mathematics, engineering, and
 natural science. Like mathematicians, computer scientists use formal languages to
 denote ideas (specifically computations). Like engineers, they design things,
-assembling components into systems and evaKSHting tradeoffs among alternatives.
+assembling components into systems and evaluating tradeoffs among alternatives.
 Like scientists, they observe the behavior of complex systems, form hypotheses, and
 test predictions.
 
@@ -77,10 +81,10 @@
 
 
 
-### 1\.1 The KSH programming language
+### 1\.1 The Python programming language
 
-The programming language you will learn is KSH. KSH is an example of a **high-level
-language**; other high-level languages you might have heard of are C, C++, Python,
+The programming language you will learn is Python. Python is an example of a **high-
+level language**; other high-level languages you might have heard of are C, C++, Perl,
 and Java.
 
 There are also **low-level languages**, sometimes referred to as "machine languages"
@@ -123,28 +127,28 @@
 
 &#x00A0; ![Compiling, and Running](https://greenteapress.com/thinkpython/html/thinkpython002.png "Compiling, and Running")
 
-KSH is considered an interpreted language because KSH programs are executed by an
-interpreter. There are two ways to use the interpreter: **interactive mode** and **script
-mode**. In interactive mode, you type KSH programs and the interpreter displays the
-result:
+Python is considered an interpreted language because Python programs are
+executed by an interpreter. There are two ways to use the interpreter: **interactive
+mode** and **script mode**. In interactive mode, you type Python programs and the
+interpreter displays the result:
 
 ```
-ksh(93u+):1:0> echo $((1 + 1))
+>>> 1 + 1
 2
 ```
 
-The expression `ksh(93u+):1:0>` is the prompt the interpreter uses to indicate that it is
-ready. If you type `echo $((1 + 1))` , the interpreter replies `2` .
+The chevron, `>>>` , is the prompt the interpreter uses to indicate that it is ready. If you
+type `1 + 1` , the interpreter replies `2` .
 
 Alternatively, you can store code in a file and use the interpreter to execute the
-contents of the file, which is called a **script**. By convention, KSH scripts have names
-that end with `.ksh` .
+contents of the file, which is called a **script**. By convention, Python scripts have
+names that end with `.py` .
 
 To execute the script, you have to tell the interpreter the name of the file. If you have
-a script named `dinsdale.ksh` and you are working in a UNIX command window, you
-type `ksh dinsdale.ksh` . In other development environments, the details of executing
-scripts are different. You can find instructions for your environment at the KSH
-website `http://kornshell.com` .
+a script named `dinsdale.py` and you are working in a UNIX command window, you
+type `python dinsdale.py` . In other development environments, the details of executing
+scripts are different. You can find instructions for your environment at the Python
+website `http://python.org` .
 
 Working in interactive mode is convenient for testing small pieces of code because
 you can type and execute them immediately. But for anything more than a few lines,
@@ -202,18 +206,18 @@
 
 #### 1\.3\.1 Syntax errors
 
-KSH can only execute a program if the syntax is correct; otherwise, the interpreter
+Python can only execute a program if the syntax is correct; otherwise, the interpreter
 displays an error message. **Syntax** refers to the structure of a program and the rules
 about that structure. For example, parentheses (in mathematical operations) have to
 come in matching pairs, so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.
 
 In English, readers can tolerate most syntax errors, which is why we can read the
-poetry of e. e. cummings without spewing error messages. KSH is not so forgiving.
-If there is a single syntax error anywhere in your program, KSH will display an error
-message and quit, and you will not be able to run your program. During the first few
-weeks of your programming career, you will probably spend a lot of time tracking
-down syntax errors. As you gain experience, you will make fewer errors and find
-them faster.
+poetry of e. e. cummings without spewing error messages. Python is not so
+forgiving. If there is a single syntax error anywhere in your program, Python will
+display an error message and quit, and you will not be able to run your program.
+During the first few weeks of your programming career, you will probably spend a lot
+of time tracking down syntax errors. As you gain experience, you will make fewer
+errors and find them faster.
 
 
 
