--- thinkperl.md	2021-10-18 15:57:31.149848672 +0000
+++ ../python2/thinkpython2.md	2021-10-16 13:11:32.213091932 +0000
@@ -1,80 +1,83 @@
 ```
-// $Id: thinkperl.md,v 2.8 2021/10/18 15:55:54 heiko Exp $
+// $Id: thinkpython2.md,v 2.4 2021/10/16 13:10:22 heiko Exp $
 //
-// $Log: thinkperl.md,v $
-// Revision 2.8  2021/10/18 15:55:54  heiko
-// R2D49: Modified copyleft sect.; deleted all links to pics.
+// $Log: thinkpython2.md,v $
+// Revision 2.4  2021/10/16 13:10:22  heiko
+// R2D47: Modified copyleft sect.; deleted all links to pics.
 //
-// Revision 2.7  2021/09/20 17:16:18  heiko
-// R2D21: Added first part of Section 1.6 (Debugging).
+// Revision 2.3  2021/09/15 17:02:53  heiko
+// R2D16: Added first part of Section 1.6 (Debugging).
 //
-// Revision 2.6  2021/09/11 17:02:59  heiko
-// R2D12: Replaced the quote from Think Java.
+// Revision 2.2  2021/09/09 13:03:51  heiko
+// R2D10: Added link to Think Python source diff file.
 //
-// Revision 2.5  2021/09/11 15:27:15  heiko
-// R2D12: Deleted second part of a quote from Think Java.
+// Revision 2.1  2021/09/03 14:04:04  heiko
+// R2D4: Added Section 1.5 (The first program).
 //
-// Revision 2.4  2021/09/10 15:38:01  heiko
-// R2D11: Modified the formatting of recent text.
-//
-// Revision 2.3  2021/09/05 19:45:05  heiko
-// R2D6: Modified the way of quoting from Think Java, 2e.
-//
-// Revision 2.2  2021/09/05 19:25:47  heiko
-// R2D6: Added missing link.
+// Revision 1.19  2021/08/09 23:04:32  heiko
+// R1D79: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 2.1  2021/09/05 19:22:17  heiko
-// R2D6: Added Section 1.5 (The first program).
+// Revision 1.18  2021/08/08 23:18:48  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.14  2021/08/10 00:17:44  heiko
-// R1D79: Replaced debug mode with interactive mode.
+// Revision 1.17  2021/08/08 23:09:08  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.13  2021/08/09 23:03:29  heiko
-// R1D79: Modified columns per line (lynx dump: 95 cpl).
+// Revision 1.16  2021/08/08 22:15:53  heiko
+// R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.12  2021/08/08 23:41:41  heiko
+// Revision 1.15  2021/08/08 21:23:00  heiko
 // R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.11  2021/08/08 22:17:22  heiko
+// Revision 1.14  2021/08/08 21:13:54  heiko
 // R1D78: Modified columns per line (lynx dump: 95 cpl).
 //
-// Revision 1.10  2021/08/06 01:10:38  heiko
-// R1D75: Added Section 1.4 (Formal and natural languages).
+// Revision 1.13  2021/08/07 22:53:20  heiko
+// R1D77: Modified columns per line (lynx dump: 95 cpl).
+//
+// Revision 1.12  2021/08/05 00:58:40  heiko
+// R1D74: Added Section 1.4 (Formal and natural languages).
 //
-// Revision 1.9  2021/06/16 02:37:39  heiko
-// R1D24: Added Section 1.3.4 (Experimental debugging).
+// Revision 1.11  2021/06/15 01:06:13  heiko
+// R1D23: Added Section 1.3.4 (Experimental debugging).
 //
-// Revision 1.8  2021/06/10 17:54:19  heiko
-// R1D19: Added Section 1.3.3 (Semantic errors).
+// Revision 1.10  2021/06/09 17:52:37  heiko
+// R1D18: Added Section 1.3.3 (Semantic errors).
 //
-// Revision 1.7  2021/06/05 18:05:08  heiko
+// Revision 1.9  2021/06/05 17:58:14  heiko
 // R1D14: Added Section 1.3.2 (Runtime errors).
 //
-// Revision 1.6  2021/05/31 11:17:59  heiko
-// R1D9: Finished Section 1.3 (What is debugging?).
+// Revision 1.8  2021/06/04 21:59:09  heiko
+// R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
+//
+// Revision 1.7  2021/06/02 20:22:52  heiko
+// R1D11: Modified the alt attributes of two images.
 //
-// Revision 1.5  2021/05/28 17:17:46  heiko
-// R1D6: Added Section 1.3.1 (What is debugging?).
+// Revision 1.6  2021/06/01 06:54:26  heiko
+// R1D10: Finished Section 1.4 (Formal and natural languages).
 //
-// Revision 1.4  2021/05/27 05:56:05  heiko
-// R1D5: Added missing link.
+// Revision 1.5  2021/05/30 14:04:29  heiko
+// R1D8: Finished Section 1.3 (What is debugging?).
 //
-// Revision 1.3  2021/05/27 05:52:19  heiko
-// R1D5: Finished Section 1.2 (What is a program?).
+// Revision 1.4  2021/05/28 12:07:58  heiko
+// R1D6: Added Section 1.3.1 (Syntax errors).
 //
-// Revision 1.2  2021/05/24 18:20:31  heiko
-// R1D2: Finished Section 1.1 (The Perl programming language).
+// Revision 1.3  2021/05/26 18:12:08  heiko
+// R1D4: Finished Section 1.2 (What is a program?).
 //
-// Revision 1.1  2021/05/23 16:09:03  heiko
+// Revision 1.2  2021/05/23 19:11:26  heiko
+// R1D1: Finished Section 1.1 (The Python programming language).
+//
+// Revision 1.1  2021/05/23 16:07:38  heiko
 // Initial revision
 //
 ```
 
 
 
-[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 2 DAY 49
+[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 2 DAY 47
 
-**Markdown Version of "Think Perl" (v5.26)**
+**Markdown Version of "Think Python" (v2.7)**
 
 Adapted from Allen B. Downey's "Think Python First Edition."
 Think Python First Edition is available at https://greenteapress.com/wp/think-python/.
@@ -85,13 +88,13 @@
 
 
 
-# Think Perl: How to Think Like a Computer Scientist
+# Think Python: How to Think Like a Computer Scientist
 
 **Heiko Blomenkamp**
-Markdown Version (which uses Perl 5.26), Revision 2.8
+Markdown Version (which uses Python 2.7), Revision 2.4
 
 Think Python First Edition: Copyright (C) 2017 Allen B. Downey.
-[Modifications](#) (Think Perl): Copyright (C) 2021 Heiko Blomenkamp.
+[Modifications](https://github.com/HeikoBlomenkamp/100-days-of-linux/blob/master/source/blomenk_downey.patch) (Markdown Version): Copyright (C) 2021 Heiko Blomenkamp.
 
 All rights reserved.
 
@@ -103,7 +106,7 @@
 
 - [Preface](#Preface)
 - [The way of the program](#1_The_way_of_the_program)
-    - [The Perl programming language](#11_The_Perl_programming_language)
+    - [The Python programming language](#11_The_Python_programming_language)
     - [What is a program?](#12_What_is_a_program)
     - [What is debugging?](#13_What_is_debugging)
     - [Formal and natural languages](#14_Formal_and_natural_languages)
@@ -115,9 +118,7 @@
 ## Preface
 
 [postponed]
-[here: interactive mode := debug mode]
-`[perl -de1]`
-[mathematics := ordinary mathematics]
+[version: python -V]
 
 
 
@@ -142,11 +143,11 @@
 
 
 
-### 1\.1 The Perl programming language
+### 1\.1 The Python programming language
 
-The programming language you will learn is Perl. Perl is an example of a
+The programming language you will learn is Python. Python is an example of a
 **high-level language**; other high-level languages you might have heard of are C, C++,
-Python, and Java.
+Perl, and Java.
 
 There are also **low-level languages**, sometimes referred to as "machine languages" or
 "assembly languages." Loosely speaking, computers can only run programs written in
@@ -174,28 +175,28 @@
 translated program is called the **object code** or the **executable**. Once a program is
 compiled, you can execute it repeatedly without further translation.
 
-Perl is considered an interpreted language because Perl programs are executed by
+Python is considered an interpreted language because Python programs are executed by
 an interpreter. There are two ways to use the interpreter: **interactive mode** and **script
-mode**. In interactive mode, you type Perl programs and the interpreter displays the
+mode**. In interactive mode, you type Python programs and the interpreter displays the
 result:
 
 ```
-__DB<1>_print 1 + 1
+>>> 1 + 1
 2
 ```
 
-The expression `__DB<1>_` is the **prompt** the interpreter uses to indicate that it is
-ready. If you type `print 1 + 1` , the interpreter replies `2` .
+The chevron, `>>>` , is the **prompt** the interpreter uses to indicate that it is ready. If
+you type `1 + 1` , the interpreter replies `2` .
 
 Alternatively, you can store code in a file and use the interpreter to execute the
-contents of the file, which is called a **script**. By convention, Perl scripts have
-names that end with `.pl` .
+contents of the file, which is called a **script**. By convention, Python scripts have
+names that end with `.py` .
 
 To execute the script, you have to tell the interpreter the name of the file. If you
-have a script named `dinsdale.pl` and you are working in a \*NIX command window, you type
-`perl dinsdale.pl` . In other development environments, the details of executing
-scripts are different. You can find instructions for your environment at the Perl
-website `http://perl.org` .
+have a script named `dinsdale.py` and you are working in a \*NIX command window, you type
+`python dinsdale.py` . In other development environments, the details of executing
+scripts are different. You can find instructions for your environment at the Python
+website `http://python.org` .
 
 Working in interactive mode is convenient for testing small pieces of code because you
 can type and execute them immediately. But for anything more than a few lines, you
@@ -253,14 +254,14 @@
 
 #### 1\.3\.1 Syntax errors
 
-Perl can only execute a program if the syntax is correct; otherwise, the interpreter
+Python can only execute a program if the syntax is correct; otherwise, the interpreter
 displays an error message. **Syntax** refers to the structure of a program and the rules
 about that structure. In mathematical operations, for example, parentheses have to
 come in matching pairs; so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.
 
 In English, readers can tolerate most syntax errors, which is why we can read the
-poetry of e e cummings without spewing error messages. Perl is not so forgiving.
-If there is a single syntax error anywhere in your program, Perl will display an
+poetry of e e cummings without spewing error messages. Python is not so forgiving.
+If there is a single syntax error anywhere in your program, Python will display an
 error message and quit, and you will not be able to run your program. During the first
 few weeks of your programming career, you will probably spend a lot of time tracking
 down syntax errors. As you gain experience, you will make fewer errors and find them
@@ -423,11 +424,11 @@
 ### 1\.5 The first program
 
 Traditionally, the first program you write in a new language is called "Hello, World!"
-because all it does is display the words "Hello, World!". In Perl, it looks like
+because all it does is display the words "Hello, World!". In Python, it looks like
 this:
 
-```pl
-print "Hello, World!\n"
+```py
+print 'Hello, World!'
 ```
 
 This is an example of a **print statement**, which doesn't actually print anything on
@@ -438,7 +439,7 @@
 ```
 
 The quotation marks in the program mark the beginning and end of the text to be
-displayed; while the **\\n** inserts a newline, they don't appear in the result.
+displayed; they don't appear in the result.
 
 
 
@@ -455,3 +456,4 @@
 This kind of experiment helps you remember what you read; it also helps with
 debugging, because you get to know what the error messages mean. It is better to make
 mistakes now and on purpose than later and accidentally.
+
