```
// $Id: thinkperl.md,v 1.7 2021/06/05 18:05:08 heiko Exp $
//
// $Log: thinkperl.md,v $
// Revision 1.7  2021/06/05 18:05:08  heiko
// R1D14: Added Section 1.3.2 (Runtime errors).
//
// Revision 1.6  2021/05/31 11:17:59  heiko
// R1D9: Finished Section 1.3 (What is debugging?).
//
// Revision 1.5  2021/05/28 17:17:46  heiko
// R1D6: Added Section 1.3.1 (What is debugging?).
//
// Revision 1.4  2021/05/27 05:56:05  heiko
// R1D5: Added missing link.
//
// Revision 1.3  2021/05/27 05:52:19  heiko
// R1D5: Finished Section 1.2 (What is a program?).
//
// Revision 1.2  2021/05/24 18:20:31  heiko
// R1D2: Finished Section 1.1 (The Perl programming language).
//
// Revision 1.1  2021/05/23 16:09:03  heiko
// Initial revision
//
```



[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 1 DAY 1--100

**Markdown Version of "Think Perl"**

Adapted from Allen B. Downey's "Think Python First Edition".
Think Python First Edition is available at https://greenteapress.com/wp/think-python/.
Styled HTML generated by [Dillinger](https://dillinger.io).

Challenge started on May 23, 2021.
[@HeikoBlomenkamp](https://twitter.com/HeikoBlomenkamp)



# Think Perl: How to Think Like a Computer Scientist

**Heiko Blomenkamp**
First Edition (which uses Perl 5.32), Version 2.0.21

Think Python First Edition: Copyright (C) 2017 Allen B. Downey.
Modifications (Think Perl): Copyright (C) 2021 Heiko Blomenkamp.

Permission is granted to copy, distribute, and/or modify this work under the terms of
the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
available at http://creativecommons.org/licenses/by-nc/3.0/.



- [Preface](#Preface)
- [The way of the program](#1_The_way_of_the_program)
    - [The Perl programming language](#11_The_Perl_programming_language)
    - [What is a program?](#12_What_is_a_program)
    - [What is debugging?](#13_What_is_debugging)



## Preface

[postponed]
`[perl -de1]`



## 1\. The way of the program

The goal of this book is to teach you to think like a computer scientist. This way of
thinking combines some of the best features of mathematics, engineering, and
natural science. Like mathematicians, computer scientists use formal languages to
denote ideas (specifically computations). Like engineers, they design things,
assembling components into systems and evaluating tradeoffs among alternatives.
Like scientists, they observe the behavior of complex systems, form hypotheses, and
test predictions.

The single most important skill for a computer scientist is **problem solving**. Problem
solving means the ability to formulate problems, think creatively about solutions, and
express a solution clearly and accurately. As it turns out, the process of learning to
program is an excellent opportunity to practice problem-solving skills. That's why
this chapter is called, "The way of the program."

On one level, you will be learning to program, a useful skill by itself. On another level,
you will use programming as a means to an end. As we go along, that end will
become clearer.



### 1\.1 The Perl programming language

The programming language you will learn is Perl. Perl is an example of a **high-level
language**; other high-level languages you might have heard of are C, C++, Python,
and Java.

There are also **low-level languages**, sometimes referred to as "machine languages"
or "assembly languages." Loosely speaking, computers can only run programs
written in low-level languages. So programs written in a high-level language have to
be processed before they can run. This extra processing takes some time, which is a
small disadvantage of high-level languages.

The advantages are enormous. First, it is much easier to program in a high-level
language. Programs written in a high-level language take less time to write, they are
shorter and easier to read, and they are more likely to be correct. Second, high-level
languages are **portable**, meaning that they can run on different kinds of computers
with few or no modifications. Low-level programs can run on only one kind of
computer and have to be rewritten to run on another.

Due to these advantages, almost all programs are written in high-level languages.
Low-level languages are used only for a few specialized applications.

Two kinds of programs process high-level languages into low-level languages:
**interpreters** and **compilers**. An interpreter reads a high-level program and executes
it, meaning that it does what the program says. It processes the program a little at a
time, alternately reading lines and performing computations. Figure 1.1 shows the
structure of an interpreter.

**Figure 1.1**
: **An interpreter processes the program a little at a time,
alternately reading lines and performing computations.**

&#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0;![From: Source Code to: Interpreter to: Output.](https://greenteapress.com/thinkpython/html/thinkpython001.png "Figure 1.1")

A compiler reads the program and translates it completely before the program starts
running. In this context, the high-level program is called the **source code**, and the
translated program is called the **object code** or the **executable**. Once a program is
compiled, you can execute it repeatedly without further translation. Figure 1.2 shows
the structure of a compiler.

**Figure 1.2**
: **A compiler translates source code into object code,
which is run by a hardware executor.**

&#x00A0; ![From: Source Code to: Compiler to: Object Code to: Executor to: Output.](https://greenteapress.com/thinkpython/html/thinkpython002.png "Figure 1.2")

Perl is considered an interpreted language because Perl programs are executed by an
interpreter. There are two ways to use the interpreter: **debug mode** and **script mode**.
In debug mode, you type Perl programs and the interpreter displays the result:

```
__DB<1>_print 1 + 1
2
```

The expression `__DB<1>_` is the **prompt** the interpreter uses to indicate that it is
ready. If you type `print 1 + 1` , the interpreter replies `2` .

Alternatively, you can store code in a file and use the interpreter to execute the
contents of the file, which is called a **script**. By convention, Perl scripts have names
that end with `.pl` .

To execute the script, you have to tell the interpreter the name of the file. If you have
a script named `dinsdale.pl` and you are working in a \*NIX command window, you
type `perl dinsdale.pl` . In other development environments, the details of executing
scripts are different. You can find instructions for your environment at the Perl
website `http://perl.org` .

Working in debug mode is convenient for testing small pieces of code because you can
type and execute them immediately. But for anything more than a few lines, you should
save your code as a script so you can modify and execute it in the future.



### 1\.2 What is a program?

A **program** is a sequence of instructions that specifies how to perform a
computation. The computation might be something mathematical, such as solving a
system of equations or finding the roots of a polynomial, but it can also be a
symbolic computation, such as searching and replacing text in a document or
(strangely enough) compiling a program.

The details look different in different languages, but a few basic instructions appear
in just about every language:

input:
: Get data from the keyboard, a file, or some other device.

output:
: Display data on the screen or send data to a file or other device.

math:
: Perform basic mathematical operations like addition and multiplication.

conditional execution:
: Check for certain conditions and execute the appropriate code.

repetition:
: Perform some action repeatedly, usually with some variation.

Believe it or not, that's pretty much all there is to it. Every program you've ever used,
no matter how complicated, is made up of instructions that look pretty much like
these. So you can think of programming as the process of breaking a large, complex
task into smaller and smaller subtasks until the subtasks are simple enough to be
performed with one of these basic instructions.

That may be a little vague, but we will come back to this topic when we talk about
**algorithms**.



### 1\.3 What is debugging?

Programming is error-prone. For whimsical reasons, programming errors are called
**bugs** and the process of tracking them down is called **debugging**.

Three kinds of errors can occur in a program: syntax errors, runtime errors, and
semantic errors. It is useful to distinguish between them in order to track them down
more quickly.



#### 1\.3\.1 Syntax errors

Perl can only execute a program if the syntax is correct; otherwise, the interpreter
displays an error message. **Syntax** refers to the structure of a program and the rules
about that structure. In mathematical operations, for example, parentheses have to
come in matching pairs; so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.

In English, readers can tolerate most syntax errors, which is why we can read the
poetry of e e cummings without spewing error messages. Perl is not so forgiving.
If there is a single syntax error anywhere in your program, Perl will display an error
message and quit, and you will not be able to run your program. During the first few
weeks of your programming career, you will probably spend a lot of time tracking
down syntax errors. As you gain experience, you will make fewer errors and find
them faster.



#### 1\.3\.2 Runtime errors

The second type of error is a **runtime error**, so called because the error does not
appear until after the program has started running. These errors are also called
**exceptions** because they usually indicate that something exceptional (and bad) has
happened. 

Runtime errors are rare in the simple programs you will see in the first few chapters,
so it might be a while before you encounter one.

