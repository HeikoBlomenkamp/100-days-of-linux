head	1.18;
access;
symbols;
locks; strict;
comment	@# @;


1.18
date	2021.08.08.23.18.48;	author heiko;	state Exp;
branches;
next	1.17;

1.17
date	2021.08.08.23.09.08;	author heiko;	state Exp;
branches;
next	1.16;

1.16
date	2021.08.08.22.15.53;	author heiko;	state Exp;
branches;
next	1.15;

1.15
date	2021.08.08.21.23.00;	author heiko;	state Exp;
branches;
next	1.14;

1.14
date	2021.08.08.21.13.54;	author heiko;	state Exp;
branches;
next	1.13;

1.13
date	2021.08.07.22.53.20;	author heiko;	state Exp;
branches;
next	1.12;

1.12
date	2021.08.05.00.58.40;	author heiko;	state Exp;
branches;
next	1.11;

1.11
date	2021.06.15.01.06.13;	author heiko;	state Exp;
branches;
next	1.10;

1.10
date	2021.06.09.17.52.37;	author heiko;	state Exp;
branches;
next	1.9;

1.9
date	2021.06.05.17.58.14;	author heiko;	state Exp;
branches;
next	1.8;

1.8
date	2021.06.04.21.59.09;	author heiko;	state Exp;
branches;
next	1.7;

1.7
date	2021.06.02.20.22.52;	author heiko;	state Exp;
branches;
next	1.6;

1.6
date	2021.06.01.06.54.26;	author heiko;	state Exp;
branches;
next	1.5;

1.5
date	2021.05.30.14.04.29;	author heiko;	state Exp;
branches;
next	1.4;

1.4
date	2021.05.28.12.07.58;	author heiko;	state Exp;
branches;
next	1.3;

1.3
date	2021.05.26.18.12.08;	author heiko;	state Exp;
branches;
next	1.2;

1.2
date	2021.05.23.19.11.26;	author heiko;	state Exp;
branches;
next	1.1;

1.1
date	2021.05.23.16.07.38;	author heiko;	state Exp;
branches;
next	;


desc
@Markdown version of "Think Python First Edition".
@


1.18
log
@R1D78: Modified columns per line (lynx dump: 95 cpl).
@
text
@```
// $Id: thinkpython2.md,v 1.17 2021/08/08 23:09:08 heiko Exp heiko $
//
// $Log: thinkpython2.md,v $
// Revision 1.17  2021/08/08 23:09:08  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.16  2021/08/08 22:15:53  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.15  2021/08/08 21:23:00  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.14  2021/08/08 21:13:54  heiko
// R1D78: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.13  2021/08/07 22:53:20  heiko
// R1D77: Modified columns per line (lynx dump: 95 cpl).
//
// Revision 1.12  2021/08/05 00:58:40  heiko
// R1D74: Added Section 1.4 (Formal and natural languages).
//
// Revision 1.11  2021/06/15 01:06:13  heiko
// R1D23: Added Section 1.3.4 (Experimental debugging).
//
// Revision 1.10  2021/06/09 17:52:37  heiko
// R1D18: Added Section 1.3.3 (Semantic errors).
//
// Revision 1.9  2021/06/05 17:58:14  heiko
// R1D14: Added Section 1.3.2 (Runtime errors).
//
// Revision 1.8  2021/06/04 21:59:09  heiko
// R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
//
// Revision 1.7  2021/06/02 20:22:52  heiko
// R1D11: Modified the alt attributes of two images.
//
// Revision 1.6  2021/06/01 06:54:26  heiko
// R1D10: Finished Section 1.4 (Formal and natural languages).
//
// Revision 1.5  2021/05/30 14:04:29  heiko
// R1D8: Finished Section 1.3 (What is debugging?).
//
// Revision 1.4  2021/05/28 12:07:58  heiko
// R1D6: Added Section 1.3.1 (Syntax errors).
//
// Revision 1.3  2021/05/26 18:12:08  heiko
// R1D4: Finished Section 1.2 (What is a program?).
//
// Revision 1.2  2021/05/23 19:11:26  heiko
// R1D1: Finished Section 1.1 (The Python programming language).
//
// Revision 1.1  2021/05/23 16:07:38  heiko
// Initial revision
//
```



[\#100DaysOfLinux](https://twitter.com/hashtag/100DaysOfLinux) :: ROUND 1 DAY 1--100

**Markdown Version of "Think Python First Edition"**

Think Python First Edition is available at https://greenteapress.com/wp/think-python/.
Styled HTML generated by [Dillinger](https://dillinger.io).

Challenge started on May 23, 2021.
[@@HeikoBlomenkamp](https://twitter.com/HeikoBlomenkamp)



# Think Python: How to Think Like a Computer Scientist

**Allen B. Downey**
First Edition (which uses Python 2), Version 2.0.17

Copyright (C) 2017 Allen B. Downey.

Permission is granted to copy, distribute, and/or modify this work under the terms of
the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
available at http://creativecommons.org/licenses/by-nc/3.0/.



- [Preface](#Preface)
- [The way of the program](#1_The_way_of_the_program)
    - [The Python programming language](#11_The_Python_programming_language)
    - [What is a program?](#12_What_is_a_program)
    - [What is debugging?](#13_What_is_debugging)
    - [Formal and natural languages](#14_Formal_and_natural_languages)



## Preface

[postponed]
[version: python -V]



## 1\. The way of the program

The goal of this book is to teach you to think like a computer scientist. This way of
thinking combines some of the best features of mathematics, engineering, and natural
science. Like mathematicians, computer scientists use formal languages to denote ideas
(specifically computations). Like engineers, they design things, assembling components
into systems and evaluating tradeoffs among alternatives.  Like scientists, they
observe the behavior of complex systems, form hypotheses, and test predictions.

The single most important skill for a computer scientist is **problem solving**. Problem
solving means the ability to formulate problems, think creatively about solutions, and
express a solution clearly and accurately. As it turns out, the process of learning to
program is an excellent opportunity to practice problem-solving skills. That's why
this chapter is called, "The way of the program."

On one level, you will be learning to program, a useful skill by itself. On another
level, you will use programming as a means to an end. As we go along, that end will
become clearer.



### 1\.1 The Python programming language

The programming language you will learn is Python. Python is an example of a
**high-level language**; other high-level languages you might have heard of are C, C++,
Perl, and Java.

There are also **low-level languages**, sometimes referred to as "machine languages" or
"assembly languages." Loosely speaking, computers can only run programs written in
low-level languages. So programs written in a high-level language have to be processed
before they can run. This extra processing takes some time, which is a small
disadvantage of high-level languages.

The advantages are enormous. First, it is much easier to program in a high-level
language. Programs written in a high-level language take less time to write, they are
shorter and easier to read, and they are more likely to be correct. Second, high-level
languages are **portable**, meaning that they can run on different kinds of computers with
few or no modifications. Low-level programs can run on only one kind of computer and
have to be rewritten to run on another.

Due to these advantages, almost all programs are written in high-level languages.
Low-level languages are used only for a few specialized applications.

Two kinds of programs process high-level languages into low-level languages:
**interpreters** and **compilers**. An interpreter reads a high-level program and executes it,
meaning that it does what the program says. It processes the program a little at a
time, alternately reading lines and performing computations. Figure 1.1 shows the
structure of an interpreter.

**Figure 1.1**
: **An interpreter processes the program a little at a time,
alternately reading lines and performing computations.**

&#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0;![From: Source Code to: Interpreter to: Output.](https://greenteapress.com/thinkpython/html/thinkpython001.png "Figure 1.1")

A compiler reads the program and translates it completely before the program starts
running. In this context, the high-level program is called the **source code**, and the
translated program is called the **object code** or the **executable**. Once a program is
compiled, you can execute it repeatedly without further translation. Figure 1.2
shows the structure of a compiler.

**Figure 1.2**
: **A compiler translates source code into object code,
which is run by a hardware executor.**

&#x00A0; ![From: Source Code to: Compiler to: Object Code to: Executor to: Output.](https://greenteapress.com/thinkpython/html/thinkpython002.png "Figure 1.2")

Python is considered an interpreted language because Python programs are executed by
an interpreter. There are two ways to use the interpreter: **interactive mode** and **script
mode**. In interactive mode, you type Python programs and the interpreter displays the
result:

```
>>> 1 + 1
2
```

The chevron, `>>>` , is the **prompt** the interpreter uses to indicate that it is ready. If
you type `1 + 1` , the interpreter replies `2` .

Alternatively, you can store code in a file and use the interpreter to execute the
contents of the file, which is called a **script**. By convention, Python scripts have
names that end with `.py` .

To execute the script, you have to tell the interpreter the name of the file. If you
have a script named `dinsdale.py` and you are working in a \*NIX command window, you type
`python dinsdale.py` . In other development environments, the details of executing
scripts are different. You can find instructions for your environment at the Python
website `http://python.org` .

Working in interactive mode is convenient for testing small pieces of code because you
can type and execute them immediately. But for anything more than a few lines, you
should save your code as a script so you can modify and execute it in the future.



### 1\.2 What is a program?

A **program** is a sequence of instructions that specifies how to perform a computation.
The computation might be something mathematical, such as solving a system of equations
or finding the roots of a polynomial, but it can also be a symbolic computation, such
as searching and replacing text in a document or (strangely enough) compiling a
program.

The details look different in different languages, but a few basic instructions appear
in just about every language:

input:
: Get data from the keyboard, a file, or some other device.

output:
: Display data on the screen or send data to a file or other device.

math:
: Perform basic mathematical operations like addition and multiplication.

conditional execution:
: Check for certain conditions and execute the appropriate code.

repetition:
: Perform some action repeatedly, usually with some variation.

Believe it or not, that's pretty much all there is to it. Every program you've ever
used, no matter how complicated, is made up of instructions that look pretty much like
these. So you can think of programming as the process of breaking a large, complex
task into smaller and smaller subtasks until the subtasks are simple enough to be
performed with one of these basic instructions.

That may be a little vague, but we will come back to this topic when we talk about
**algorithms**.



### 1\.3 What is debugging?

Programming is error-prone. For whimsical reasons, programming errors are called **bugs**
and the process of tracking them down is called **debugging**.

Three kinds of errors can occur in a program: syntax errors, runtime errors, and
semantic errors. It is useful to distinguish between them in order to track them down
more quickly.



#### 1\.3\.1 Syntax errors

Python can only execute a program if the syntax is correct; otherwise, the interpreter
displays an error message. **Syntax** refers to the structure of a program and the rules
about that structure. In mathematical operations, for example, parentheses have to
come in matching pairs; so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.

In English, readers can tolerate most syntax errors, which is why we can read the
poetry of e e cummings without spewing error messages. Python is not so forgiving.
If there is a single syntax error anywhere in your program, Python will display an
error message and quit, and you will not be able to run your program. During the first
few weeks of your programming career, you will probably spend a lot of time tracking
down syntax errors. As you gain experience, you will make fewer errors and find them
faster.



#### 1\.3\.2 Runtime errors

The second type of error is a **runtime error**, so called because the error does not
appear until after the program has started running. These errors are also called
**exceptions** because they usually indicate that something exceptional (and bad) has
happened. 

Runtime errors are rare in the simple programs you will see in the first few chapters,
so it might be a while before you encounter one.



#### 1\.3\.3 Semantic errors

The third type of error is the **semantic error**. If there is a semantic error in your
program, it will run successfully in the sense that the computer will not generate any
error messages, but it will not do the right thing. It will do something else.
Specifically, it will do what you told it to do.

The problem is that the program you wrote is not the program you wanted to write. The
meaning of the program (its semantics) is wrong. Identifying semantic errors can be
tricky because it requires you to work backward by looking at the output of the
program and trying to figure out what it is doing.



#### 1\.3\.4 Experimental debugging

One of the most important skills you will acquire is debugging. Although it can be
frustrating, debugging is one of the most intellectually rich, challenging, and
interesting parts of programming.

In some ways, debugging is like detective work. You are confronted with clues, and you
have to infer the processes and events that led to the results you see.

Debugging is also like an experimental science. Once you have an idea about what is
going wrong, you modify your program and try again. If your hypothesis was correct,
then you can predict the result of the modification, and you take a step closer to a
working program. If your hypothesis was wrong, you have to come up with a new one. As
Sherlock Holmes pointed out,

> "When you have eliminated the impossible, whatever
> remains, however improbable, must be the truth."
> ---A. Conan Doyle, The Sign of Four

For some people, programming and debugging are the same thing. That is, programming is
the process of gradually debugging a program until it does what you want. The idea is
that you should start with a program that does *something* and make small modifications,
debugging them as you go, so that you always have a working program.

For example, Linux is an operating system that contains thousands of lines of code,
but it started out as a simple program Linus Torvalds used to explore the Intel 80386
chip. According to Larry Greenfield,

> "One of Linus's earlier projects was a program that would
> switch between printing AAAA and BBBB. This later evolved
> to Linux."
> ---The Linux Users' Guide, Beta Version 1

Later chapters will make more suggestions about debugging and other programming
practices.



### 1\.4 Formal and natural languages

**Natural languages** are the languages people speak, such as English, Spanish, and
French. They were not designed by people (although people try to impose some order on
them); they evolved naturally.

**Formal languages** are languages that are designed by people for specific applications.
For example, the notation that mathematicians use is a formal language that is
particularly good at denoting relationships among numbers and symbols. Chemists use a
formal language to represent the chemical structure of molecules. And most
importantly:

&#x00A0; &#x00A0; &#x00A0;**Programming languages are formal languages that have been designed**
&#x00A0; &#x00A0; &#x00A0;**to express computations.** 

Formal languages tend to have strict rules about syntax. For example, 3 + 3 = 6 is a
syntactically correct mathematical statement, but 3+ = 3$6 is not. *H&#x2082;O* is a
syntactically correct chemical formula, but *&#x2082;Zz* is not.

Syntax rules come in two flavors, pertaining to **tokens** and structure. Tokens are the
basic elements of the language, such as words, numbers, and chemical elements.  One of
the problems with 3+ = 3$6 is that *$* is not a legal token in mathematics (at least
as far as I know). Similarly, *&#x2082;Zz* is not legal because there is no element with the
abbreviation *Zz*.

The second type of syntax rule pertains to the **structure of a statement**; that is, the
way the tokens are arranged. The statement 3+ = 3 is illegal because even though +
and = are legal tokens, you can't have one right after the other. Similarly, in a
chemical formula the subscript comes after the element name, not before.

When you read a sentence in English or a statement in a formal language, you have to
figure out what the structure of the sentence is (although in a natural language you
do this subconsciously). This process is called **parsing**.

For example, when you hear the sentence, "The penny dropped," you understand that "the
penny" is the subject and "dropped" is the predicate. Once you have parsed a sentence,
you can figure out what it means, or the semantics of the sentence.  Assuming that you
know what a penny is and what it means to drop, you will understand the general
implication of this sentence.

Although formal and natural languages have many features in common---tokens, structure,
syntax, and semantics---there are some differences:

ambiguity:
: Natural languages are full of ambiguity, which people deal with by using
contextual clues and other information. Formal languages are designed to be
nearly or completely unambiguous, which means that any statement has exactly
one meaning, regardless of context.

redundancy:
: In order to make up for ambiguity and reduce misunderstandings, natural
languages employ lots of redundancy. As a result, they are often verbose.
Formal languages are less redundant and more concise.

literalness:
: Natural languages are full of idiom and metaphor. If I say, "The penny
dropped," there is probably no penny and nothing dropping (this idiom means
that someone realized something after a period of confusion). Formal languages
mean exactly what they say.

People who grow up speaking a natural language---everyone---often have a hard time
adjusting to formal languages. In some ways, the difference between formal and natural
language is like the difference between poetry and prose, but more so:

Poetry:
: Words are used for their sounds as well as for their meaning, and the whole
poem together creates an effect or emotional response. Ambiguity is not only
common but often deliberate.

Prose:
: The literal meaning of words is more important, and the structure contributes
more meaning. Prose is more amenable to analysis than poetry but still often
ambiguous.

Programs:
: The meaning of a computer program is unambiguous and literal, and can be
understood entirely by analysis of the tokens and structure.

Here are some suggestions for reading programs (and other formal languages). First,
remember that formal languages are *much more dense* than natural languages, so it takes
longer to read them. Also, the structure is very important, so it is usually not a
good idea to read from top to bottom, left to right. Instead, *learn to parse* the
program in your head, identifying the tokens and interpreting the structure. Finally,
the details matter. Small errors in *spelling* and *punctuation*, which you can get away
with in natural languages, can make a big difference in a formal language.

@


1.17
log
@R1D78: Modified columns per line (lynx dump: 95 cpl).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.16 2021/08/08 22:15:53 heiko Exp heiko $
d5 3
d80 2
a81 2
the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is available
at http://creativecommons.org/licenses/by-nc/3.0/.
@


1.16
log
@R1D78: Modified columns per line (lynx dump: 95 cpl).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.15 2021/08/08 21:23:00 heiko Exp heiko $
d5 3
d76 3
a78 3
Permission is granted to copy, distribute, and/or modify this work under the terms of the
Creative Commons Attribution-NonCommercial 3.0 Unported License, which is available at
http://creativecommons.org/licenses/by-nc/3.0/.
d90 1
d95 1
@


1.15
log
@R1D78: Modified columns per line (lynx dump: 95 cpl).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.14 2021/08/08 21:13:54 heiko Exp heiko $
d5 3
d400 1
a400 1
program in your head, identifying the tokens and interpreting the structure.  Finally,
@


1.14
log
@R1D78: Modified columns per line (lynx dump: 95 cpl).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.13 2021/08/07 22:53:20 heiko Exp heiko $
d5 3
d70 3
a72 3
Permission is granted to copy, distribute, and/or modify this work under the terms of
the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is available
at http://creativecommons.org/licenses/by-nc/3.0/.
@


1.13
log
@R1D77: Modified columns per line (lynx dump: 95 cpl).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.12 2021/08/05 00:58:40 heiko Exp heiko $
d5 3
d68 2
a69 2
the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is
available at http://creativecommons.org/licenses/by-nc/3.0/.
@


1.12
log
@R1D74: Added Section 1.4 (Formal and natural languages).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.11 2021/06/15 01:06:13 heiko Exp heiko $
d5 3
d87 5
a91 6
thinking combines some of the best features of mathematics, engineering, and
natural science. Like mathematicians, computer scientists use formal languages to
denote ideas (specifically computations). Like engineers, they design things,
assembling components into systems and evaluating tradeoffs among alternatives.
Like scientists, they observe the behavior of complex systems, form hypotheses, and
test predictions.
d99 2
a100 2
On one level, you will be learning to program, a useful skill by itself. On another level,
you will use programming as a means to an end. As we go along, that end will
d107 9
a115 9
The programming language you will learn is Python. Python is an example of a **high-
level language**; other high-level languages you might have heard of are C, C++, Perl,
and Java.

There are also **low-level languages**, sometimes referred to as "machine languages"
or "assembly languages." Loosely speaking, computers can only run programs
written in low-level languages. So programs written in a high-level language have to
be processed before they can run. This extra processing takes some time, which is a
small disadvantage of high-level languages.
d120 3
a122 3
languages are **portable**, meaning that they can run on different kinds of computers
with few or no modifications. Low-level programs can run on only one kind of
computer and have to be rewritten to run on another.
d128 2
a129 2
**interpreters** and **compilers**. An interpreter reads a high-level program and executes
it, meaning that it does what the program says. It processes the program a little at a
d142 2
a143 2
compiled, you can execute it repeatedly without further translation. Figure 1.2 shows
the structure of a compiler.
d151 4
a154 4
Python is considered an interpreted language because Python programs are
executed by an interpreter. There are two ways to use the interpreter: **interactive
mode** and **script mode**. In interactive mode, you type Python programs and the
interpreter displays the result:
d161 2
a162 2
The chevron, `>>>` , is the **prompt** the interpreter uses to indicate that it is ready. If you
type `1 + 1` , the interpreter replies `2` .
d168 3
a170 3
To execute the script, you have to tell the interpreter the name of the file. If you have
a script named `dinsdale.py` and you are working in a \*NIX command window, you
type `python dinsdale.py` . In other development environments, the details of executing
d174 3
a176 3
Working in interactive mode is convenient for testing small pieces of code because
you can type and execute them immediately. But for anything more than a few lines,
you should save your code as a script so you can modify and execute it in the future.
d182 5
a186 5
A **program** is a sequence of instructions that specifies how to perform a
computation. The computation might be something mathematical, such as solving a
system of equations or finding the roots of a polynomial, but it can also be a
symbolic computation, such as searching and replacing text in a document or
(strangely enough) compiling a program.
d206 2
a207 2
Believe it or not, that's pretty much all there is to it. Every program you've ever used,
no matter how complicated, is made up of instructions that look pretty much like
d219 2
a220 2
Programming is error-prone. For whimsical reasons, programming errors are called
**bugs** and the process of tracking them down is called **debugging**.
d237 5
a241 5
If there is a single syntax error anywhere in your program, Python will display an error
message and quit, and you will not be able to run your program. During the first few
weeks of your programming career, you will probably spend a lot of time tracking
down syntax errors. As you gain experience, you will make fewer errors and find
them faster.
d264 4
a267 4
The problem is that the program you wrote is not the program you wanted to write.
The meaning of the program (its semantics) is wrong. Identifying semantic errors
can be tricky because it requires you to work backward by looking at the output of
the program and trying to figure out what it is doing.
d277 2
a278 2
In some ways, debugging is like detective work. You are confronted with clues, and
you have to infer the processes and events that led to the results you see.
d283 2
a284 2
working program. If your hypothesis was wrong, you have to come up with a new
one. As Sherlock Holmes pointed out,
d290 4
a293 5
For some people, programming and debugging are the same thing. That is,
programming is the process of gradually debugging a program until it does what you
want. The idea is that you should start with a program that does *something* and
make small modifications, debugging them as you go, so that you always have a
working program.
d304 2
a305 2
Later chapters will make more suggestions about debugging and other
programming practices.
d312 2
a313 2
French. They were not designed by people (although people try to impose some
order on them); they evolved naturally.
d315 5
a319 5
**Formal languages** are languages that are designed by people for specific
applications. For example, the notation that mathematicians use is a formal
language that is particularly good at denoting relationships among numbers and
symbols. Chemists use a formal language to represent the chemical structure of
molecules. And most importantly:
d329 4
a332 4
basic elements of the language, such as words, numbers, and chemical elements.
One of the problems with 3+ = 3$6 is that *$* is not a legal token in mathematics (at
least as far as I know). Similarly, *&#x2082;Zz* is not legal because there is no element with
the abbreviation *Zz*.
d335 2
a336 2
way the tokens are arranged. The statement 3+ = 3 is illegal because even though + and
= are legal tokens, you can't have one right after the other. Similarly, in a
d339 9
a347 9
When you read a sentence in English or a statement in a formal language, you have
to figure out what the structure of the sentence is (although in a natural language
you do this subconsciously). This process is called **parsing**.

For example, when you hear the sentence, "The penny dropped," you understand that
"the penny" is the subject and "dropped" is the predicate. Once you have parsed a
sentence, you can figure out what it means, or the semantics of the sentence.
Assuming that you know what a penny is and what it means to drop, you will
understand the general implication of this sentence.
d349 2
a350 2
Although formal and natural languages have many features in common---tokens,
structure, syntax, and semantics---there are some differences:
d355 2
a356 2
nearly or completely unambiguous, which means that any statement has
exactly one meaning, regardless of context.
d364 3
a366 3
: Natural languages are full of idiom and metaphor. If I say, "The penny dropped,"
there is probably no penny and nothing dropping (this idiom means that
someone realized something after a period of confusion). Formal languages
d370 2
a371 2
adjusting to formal languages. In some ways, the difference between formal and
natural language is like the difference between poetry and prose, but more so:
d387 7
a393 7
Here are some suggestions for reading programs (and other formal languages).
First, remember that formal languages are *much more dense* than natural
languages, so it takes longer to read them. Also, the structure is very important, so it
is usually not a good idea to read from top to bottom, left to right. Instead, *learn to
parse* the program in your head, identifying the tokens and interpreting the structure.
Finally, the details matter. Small errors in *spelling* and *punctuation*, which you can get
away with in natural languages, can make a big difference in a formal language.
@


1.11
log
@R1D23: Added Section 1.3.4 (Experimental debugging).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.10 2021/06/09 17:52:37 heiko Exp heiko $
d5 3
d267 127
a393 39


#### 1\.3\.4 Experimental debugging

One of the most important skills you will acquire is debugging. Although it can be
frustrating, debugging is one of the most intellectually rich, challenging, and
interesting parts of programming.

In some ways, debugging is like detective work. You are confronted with clues, and
you have to infer the processes and events that led to the results you see.

Debugging is also like an experimental science. Once you have an idea about what is
going wrong, you modify your program and try again. If your hypothesis was correct,
then you can predict the result of the modification, and you take a step closer to a
working program. If your hypothesis was wrong, you have to come up with a new
one. As Sherlock Holmes pointed out,

> "When you have eliminated the impossible, whatever
> remains, however improbable, must be the truth."
> ---A. Conan Doyle, The Sign of Four

For some people, programming and debugging are the same thing. That is,
programming is the process of gradually debugging a program until it does what you
want. The idea is that you should start with a program that does *something* and
make small modifications, debugging them as you go, so that you always have a
working program.

For example, Linux is an operating system that contains thousands of lines of code,
but it started out as a simple program Linus Torvalds used to explore the Intel 80386
chip. According to Larry Greenfield,

> "One of Linus's earlier projects was a program that would
> switch between printing AAAA and BBBB. This later evolved
> to Linux."
> ---The Linux Users' Guide, Beta Version 1

Later chapters will make more suggestions about debugging and other
programming practices.

@


1.10
log
@R1D18: Added Section 1.3.3 (Semantic errors).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.9 2021/06/05 17:58:14 heiko Exp heiko $
d5 3
d264 39
@


1.9
log
@R1D14: Added Section 1.3.2 (Runtime errors).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.8 2021/06/04 21:59:09 heiko Exp heiko $
d5 3
d246 14
@


1.8
log
@R1D13: Modified the structure of Section 1.3.1 (Syntax errors).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.7 2021/06/02 20:22:52 heiko Exp heiko $
d5 3
d231 12
@


1.7
log
@R1D11: Modified the alt attributes of two images.
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.6 2021/06/01 06:54:26 heiko Exp heiko $
d5 3
d218 2
a219 2
about that structure. For example, parentheses (in mathematical operations) have to
come in matching pairs, so `(4 + 5) * 10` is legal, but `8)` is a **syntax error**.
d222 6
a227 154
poetry of e. e. cummings without spewing error messages. Python is not so
forgiving. If there is a single syntax error anywhere in your program, Python will
display an error message and quit, and you will not be able to run your program.
During the first few weeks of your programming career, you will probably spend a lot
of time tracking down syntax errors. As you gain experience, you will make fewer
errors and find them faster.



#### 1\.3\.2 Runtime errors

The second type of error is a **runtime error**, so called because the error does not
appear until after the program has started running. These errors are also called
**exceptions** because they usually indicate that something exceptional (and bad) has
happened. 

Runtime errors are rare in the simple programs you will see in the first few chapters,
so it might be a while before you encounter one.



#### 1\.3\.3 Semantic errors

The third type of error is the **semantic error**. If there is a semantic error in your
program, it will run successfully in the sense that the computer will not generate any
error messages, but it will not do the right thing. It will do something else.
Specifically, it will do what you told it to do.

The problem is that the program you wrote is not the program you wanted to write.
The meaning of the program (its semantics) is wrong. Identifying semantic errors
can be tricky because it requires you to work backward by looking at the output of
the program and trying to figure out what it is doing.



#### 1\.3\.4 Experimental debugging

One of the most important skills you will acquire is debugging. Although it can be
frustrating, debugging is one of the most intellectually rich, challenging, and
interesting parts of programming.

In some ways, debugging is like detective work. You are confronted with clues, and
you have to infer the processes and events that led to the results you see.

Debugging is also like an experimental science. Once you have an idea about what is
going wrong, you modify your program and try again. If your hypothesis was correct,
then you can predict the result of the modification, and you take a step closer to a
working program. If your hypothesis was wrong, you have to come up with a new
one. As Sherlock Holmes pointed out, "When you have eliminated the impossible,
whatever remains, however improbable, must be the truth." (A. Conan Doyle, *The Sign
of Four*).

For some people, programming and debugging are the same thing. That is,
programming is the process of gradually debugging a program until it does what you
want. The idea is that you should start with a program that does *something* and
make small modifications, debugging them as you go, so that you always have a
working program.

For example, Linux is an operating system that contains thousands of lines of code,
but it started out as a simple program Linus Torvalds used to explore the Intel 80386
chip. According to Larry Greenfield, "One of Linus's earlier projects was a program
that would switch between printing AAAA and BBBB. This later evolved to Linux."
(*The Linux Users' Guide,* Beta Version 1).

Later chapters will make more suggestions about debugging and other
programming practices.



### 1\.4 Formal and natural languages

**Natural languages** are the languages people speak, such as English, Spanish, and
French. They were not designed by people (although people try to impose some
order on them); they evolved naturally.

Formal languages are languages that are designed by people for specific
applications. For example, the notation that mathematicians use is a formal
language that is particularly good at denoting relationships among numbers and
symbols. Chemists use a formal language to represent the chemical structure of
molecules. And most importantly:

> Programming languages are formal languages that have been designed
> to express computations. 

Formal languages tend to have strict rules about syntax. For example, *3 + 3 = 6* is a
syntactically correct mathematical statement, but *3 + = 3 $ 6* is not. *H&#x2082;O* is a
syntactically correct chemical formula, but *&#x2082;Zz* is not.

Syntax rules come in two flavors, pertaining to **tokens** and **structure**. *Tokens* are the
basic elements of the language, such as words, numbers, and chemical elements.
One of the problems with *3 + = 3 $ 6* is that *$* is not a legal token in mathematics (at
least as far as I know). Similarly, *&#x2082;Zz* is not legal because there is no element with
the abbreviation *Zz*.

The second type of syntax rule pertains to the *structure* of a statement; that is, the
way the tokens are arranged. The statement *3 + = 3* is illegal because even though *+* and
*=* are legal tokens, you can't have one right after the other. Similarly, in a
chemical formula the subscript comes after the element name, not before.

When you read a sentence in English or a statement in a formal language, you have
to figure out what the structure of the sentence is (although in a natural language
you do this subconsciously). This process is called **parsing**.

For example, when you hear the sentence, "The penny dropped," you understand that
"the penny" is the subject and "dropped" is the predicate. Once you have parsed a
sentence, you can figure out what it means, or the semantics of the sentence.
Assuming that you know what a penny is and what it means to drop, you will
understand the general implication of this sentence.

Although formal and natural languages have many features in common---tokens,
structure, syntax, and semantics---there are some differences:

ambiguity:
: Natural languages are full of ambiguity, which people deal with by using
contextual clues and other information. Formal languages are designed to be
nearly or completely unambiguous, which means that any statement has
exactly one meaning, regardless of context.

redundancy:
: In order to make up for ambiguity and reduce misunderstandings, natural
languages employ lots of redundancy. As a result, they are often verbose.
Formal languages are less redundant and more concise.

literalness:
: Natural languages are full of idiom and metaphor. If I say, "The penny dropped,"
there is probably no penny and nothing dropping (this idiom means that
someone realized something after a period of confusion). Formal languages
mean exactly what they say.

People who grow up speaking a natural language---everyone---often have a hard time
adjusting to formal languages. In some ways, the difference between formal and
natural language is like the difference between poetry and prose, but more so:

Poetry:
: Words are used for their sounds as well as for their meaning, and the whole
poem together creates an effect or emotional response. Ambiguity is not only
common but often deliberate.

Prose:
: The literal meaning of words is more important, and the structure contributes
more meaning. Prose is more amenable to analysis than poetry but still often
ambiguous.

Programs:
: The meaning of a computer program is unambiguous and literal, and can be
understood entirely by analysis of the tokens and structure.

Here are some suggestions for reading programs (and other formal languages).
First, remember that formal languages are much more dense than natural
languages, so it takes longer to read them. Also, the structure is very important, so it
is usually not a good idea to read from top to bottom, left to right. Instead, learn to
parse the program in your head, identifying the tokens and interpreting the structure.
Finally, the details matter. Small errors in spelling and punctuation, which you can get
away with in natural languages, can make a big difference in a formal language.
@


1.6
log
@R1D10: Finished Section 1.4 (Formal and natural languages).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.5 2021/05/30 14:04:29 heiko Exp heiko $
d5 3
d120 1
a120 1
&#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0; &#x00A0;![Interpreter](https://greenteapress.com/thinkpython/html/thinkpython001.png "Interpreter")
d132 1
a132 1
&#x00A0; ![Compiling, and Running](https://greenteapress.com/thinkpython/html/thinkpython002.png "Compiling, and Running")
d144 1
a144 1
The chevron, `>>>` , is the prompt the interpreter uses to indicate that it is ready. If you
d152 1
a152 1
a script named `dinsdale.py` and you are working in a UNIX command window, you
@


1.5
log
@R1D8: Finished Section 1.3 (What is debugging?).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.4 2021/05/28 12:07:58 heiko Exp heiko $
d5 3
d54 1
d278 1
a278 1
(*The Linux Users' Guide*, Beta Version 1).
d282 88
@


1.4
log
@R1D6: Added Section 1.3.1 (Syntax errors).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.3 2021/05/26 18:12:08 heiko Exp heiko $
d5 3
d56 1
a56 1

d218 60
@


1.3
log
@R1D4: Finished Section 1.2 (What is a program?).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.2 2021/05/23 19:11:26 heiko Exp heiko $
d5 3
d47 1
a47 1

d187 28
@


1.2
log
@R1D1: Finished Section 1.1 (The Python programming language).
@
text
@d2 1
a2 1
// $Id: thinkpython2.md,v 1.1 2021/05/23 16:07:38 heiko Exp $
d5 3
d23 1
a23 1
[@@HeikoBlomenkamp](https://twitter.com/HeikoBlomenkamp) 
d43 1
d147 37
@


1.1
log
@Initial revision
@
text
@d2 5
a6 1
// $Id$
a7 1
// $Log$
d34 109
@
